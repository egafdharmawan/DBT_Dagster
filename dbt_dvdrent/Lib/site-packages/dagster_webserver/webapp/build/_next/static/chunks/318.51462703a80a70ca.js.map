{"version":3,"file":"static/chunks/318.51462703a80a70ca.js","mappings":"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","sources":["webpack://_N_E/../ui-components/src/components/PageHeader.tsx","webpack://_N_E/../ui-core/src/instance/InstanceHealthPage.tsx","webpack://_N_E/../ui-core/src/nav/InstanceWarningIcon.tsx","webpack://_N_E/../ui-core/src/nav/WorkspaceStatus.tsx","webpack://_N_E/../ui-core/src/instance/InstanceTabs.tsx","webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\n\nimport {colorBackgroundLight} from '../theme/color';\n\nimport {Box} from './Box';\nimport {IconName} from './Icon';\n\ninterface Props {\n  title: React.ReactNode;\n  tags?: React.ReactNode;\n  icon?: IconName;\n  description?: React.ReactNode;\n  metadata?: React.ReactNode;\n  right?: React.ReactNode;\n  tabs?: React.ReactNode;\n}\n\nexport const PageHeader = (props: Props) => {\n  const {title, tags, right, tabs} = props;\n  return (\n    <PageHeaderContainer\n      background={colorBackgroundLight()}\n      padding={{top: 16, left: 24, right: 12}}\n      border=\"bottom\"\n    >\n      <Box flex={{direction: 'row', justifyContent: 'space-between'}} padding={{bottom: 16}}>\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, wrap: 'wrap'}}>\n          {title}\n          {tags}\n        </Box>\n        {right}\n      </Box>\n      {tabs}\n    </PageHeaderContainer>\n  );\n};\n\nconst PageHeaderContainer = styled(Box)`\n  width: 100%;\n\n  /**\n   * Blueprint breadcrumbs annoyingly have a built-in height.\n   */\n  .bp4-breadcrumbs {\n    height: auto;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, PageHeader, Heading, Subheading, colorTextLight} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nimport {DaemonList} from './DaemonList';\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {InstanceHealthQuery, InstanceHealthQueryVariables} from './types/InstanceHealthPage.types';\n\nexport const InstanceHealthPage = () => {\n  useTrackPageView();\n  useDocumentTitle('Daemons');\n\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const queryData = useQuery<InstanceHealthQuery, InstanceHealthQueryVariables>(\n    INSTANCE_HEALTH_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n  const {loading, data} = queryData;\n\n  const daemonContent = () => {\n    if (loading && !data?.instance) {\n      return (\n        <Box padding={{horizontal: 24}} style={{color: colorTextLight()}}>\n          Loadingâ€¦\n        </Box>\n      );\n    }\n    return data?.instance ? (\n      <DaemonList daemonStatuses={data.instance.daemonHealth.allDaemonStatuses} />\n    ) : null;\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"health\" refreshState={refreshState} />}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Daemon statuses</Subheading>\n      </Box>\n      {daemonContent()}\n    </>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceHealthPage;\n\nconst INSTANCE_HEALTH_QUERY = gql`\n  query InstanceHealthQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {Icon, colorAccentYellow} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const InstanceWarningIcon = React.memo(() => {\n  const {daemons} = React.useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={colorAccentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {\n  Icon,\n  Tooltip,\n  Spinner,\n  colorAccentGray,\n  colorAccentYellow,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const WorkspaceStatus = React.memo(({placeholder}: {placeholder: boolean}) => {\n  const {codeLocations} = React.useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={colorAccentGray()} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={colorAccentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = React.useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? (\n          <TabLink id=\"concurrency\" title=\"Concurrency limits\" to=\"/concurrency\" />\n        ) : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n"],"names":["PageHeader","props","title","tags","right","tabs","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsxs","PageHeaderContainer","background","colorBackgroundLight","padding","top","left","border","Box","flex","direction","justifyContent","bottom","alignItems","gap","wrap","styled","InstanceHealthPage","useTrackPageView","useDocumentTitle","pageTitle","React","InstancePageContext","queryData","useQuery","INSTANCE_HEALTH_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","loading","data","Fragment","jsx","Heading","InstanceTabs","tab","vertical","horizontal","Subheading","instance","DaemonList","daemonStatuses","daemonHealth","allDaemonStatuses","style","color","colorTextLight","__webpack_exports__","gql","INSTANCE_HEALTH_FRAGMENT","InstanceWarningIcon","daemons","DeploymentStatusContext","jsx_runtime","WarningTooltip","content","position","modifiers","offset","enabled","options","Icon","name","colorAccentYellow","WorkspaceStatus","param","placeholder","codeLocations","type","Tooltip","placement","Spinner","purpose","fillColor","colorAccentGray","div","width","healthTitle","canSeeConfig","useCanSeeConfig","Tabs","selectedTabId","TabLink","id","to","icon","QueryRefreshCountdown","INSTANCE_CONFIG_HAS_INFO","hasInfo"],"sourceRoot":""}