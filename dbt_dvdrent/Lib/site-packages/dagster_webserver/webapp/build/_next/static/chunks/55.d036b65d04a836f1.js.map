{"version":3,"file":"static/chunks/55.d036b65d04a836f1.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/assets/AutomaterializeTagWithEvaluation.tsx","webpack://_N_E/../ui-core/src/hooks/useFavicon.tsx","webpack://_N_E/../ui-core/src/runs/Run.tsx","webpack://_N_E/../ui-core/src/runs/RunHeaderActions.tsx","webpack://_N_E/../ui-core/src/runs/RunRootTrace.tsx","webpack://_N_E/../ui-core/src/runs/RunTimingTags.tsx","webpack://_N_E/../ui-core/src/runs/TickTagForRun.tsx","webpack://_N_E/../ui-core/src/runs/RunRoot.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {Box, Icon, MiddleTruncate, Popover, Tag} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetKey} from './types';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base'});\n\ninterface Props {\n  assetKeys: AssetKey[];\n  evaluationId: string;\n}\n\nexport const AutomaterializeTagWithEvaluation = ({assetKeys, evaluationId}: Props) => {\n  const sortedKeys = React.useMemo(() => {\n    return [...assetKeys].sort((a, b) => COLLATOR.compare(a.path.join('/'), b.path.join('/')));\n  }, [assetKeys]);\n\n  return (\n    <Popover\n      placement=\"bottom\"\n      content={\n        <div style={{width: '340px'}}>\n          <Box padding={{vertical: 8, horizontal: 12}} border=\"bottom\" style={{fontWeight: 600}}>\n            Auto-materialized\n          </Box>\n          <Box\n            flex={{direction: 'column', gap: 12}}\n            padding={{vertical: 12}}\n            style={{maxHeight: '220px', overflowY: 'auto'}}\n          >\n            {sortedKeys.map((assetKey) => {\n              const url = assetDetailsPathForKey(assetKey, {\n                view: 'auto-materialize-history',\n                evaluation: evaluationId,\n              });\n              return (\n                <Box\n                  key={url}\n                  padding={{vertical: 8, left: 12, right: 16}}\n                  flex={{\n                    direction: 'row',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    gap: 8,\n                  }}\n                  style={{overflow: 'hidden'}}\n                >\n                  <Box\n                    flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                    style={{overflow: 'hidden'}}\n                  >\n                    <Icon name=\"asset\" />\n                    <MiddleTruncate text={assetKey.path.join('/')} />\n                  </Box>\n                  <Link to={url} style={{whiteSpace: 'nowrap'}}>\n                    View evaluation\n                  </Link>\n                </Box>\n              );\n            })}\n          </Box>\n        </div>\n      }\n      interactionKind=\"hover\"\n    >\n      <Tag icon=\"auto_materialize_policy\">Auto-materialized</Tag>\n    </Popover>\n  );\n};\n","import * as React from 'react';\n\nexport const useFavicon = (href: string) => {\n  React.useEffect(() => {\n    const el = document.querySelector('link[rel=\"icon\"][type=\"image/svg+xml\"]');\n    if (!el) {\n      return;\n    }\n    const previousHref = el.getAttribute('href');\n    el.setAttribute('href', href);\n    return () => {\n      if (previousHref) {\n        el.setAttribute('href', previousHref);\n      }\n    };\n  }, [href]);\n};\n","import {\n  Box,\n  NonIdealState,\n  SplitPanelContainer,\n  ErrorBoundary,\n  Button,\n  Icon,\n  Tooltip,\n  colorBackgroundDefault,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {GanttChart, GanttChartLoadingState, GanttChartMode, QueuedState} from '../gantt/GanttChart';\nimport {toGraphQueryItems} from '../gantt/toGraphQueryItems';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useFavicon} from '../hooks/useFavicon';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSupportsCapturedLogs} from '../instance/useSupportsCapturedLogs';\n\nimport {CapturedOrExternalLogPanel} from './CapturedLogPanel';\nimport {ComputeLogPanel} from './ComputeLogPanel';\nimport {LogFilter, LogsProvider, LogsProviderLogs} from './LogsProvider';\nimport {LogsScrollingTable} from './LogsScrollingTable';\nimport {LogsToolbar, LogType} from './LogsToolbar';\nimport {RunActionButtons} from './RunActionButtons';\nimport {RunContext} from './RunContext';\nimport {IRunMetadataDict, RunMetadataProvider} from './RunMetadataProvider';\nimport {RunRootTrace} from './RunRootTrace';\nimport {RunDagsterRunEventFragment, RunPageFragment} from './types/RunFragments.types';\nimport {\n  useComputeLogFileKeyForSelection,\n  matchingComputeLogKeyFromStepKey,\n} from './useComputeLogFileKeyForSelection';\nimport {useQueryPersistedLogFilter} from './useQueryPersistedLogFilter';\n\ninterface RunProps {\n  runId: string;\n  run?: RunPageFragment;\n  trace: RunRootTrace;\n}\n\nconst runStatusFavicon = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.FAILURE:\n      return '/favicon-run-failed.svg';\n    case RunStatus.SUCCESS:\n      return '/favicon-run-success.svg';\n    case RunStatus.STARTING:\n    case RunStatus.STARTED:\n    case RunStatus.CANCELING:\n      return '/favicon-run-pending.svg';\n    default:\n      return '/favicon.svg';\n  }\n};\n\nexport const Run = (props: RunProps) => {\n  const {run, runId, trace} = props;\n  const [logsFilter, setLogsFilter] = useQueryPersistedLogFilter();\n  const [selectionQuery, setSelectionQuery] = useQueryPersistedState<string>({\n    queryKey: 'selection',\n    defaults: {selection: ''},\n  });\n\n  useFavicon(run ? runStatusFavicon(run.status) : '/favicon.svg');\n  useDocumentTitle(\n    run\n      ? `${!isHiddenAssetGroupJob(run.pipelineName) ? run.pipelineName : ''} ${runId.slice(\n          0,\n          8,\n        )} [${run.status}]`\n      : `Run: ${runId}`,\n  );\n\n  const onShowStateDetails = (stepKey: string, logs: RunDagsterRunEventFragment[]) => {\n    const errorNode = logs.find(\n      (node) => node.__typename === 'ExecutionStepFailureEvent' && node.stepKey === stepKey,\n    );\n\n    if (errorNode) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={errorNode} />,\n      });\n    }\n  };\n\n  const onSetSelectionQuery = (query: string) => {\n    setSelectionQuery(query);\n    setLogsFilter({\n      ...logsFilter,\n      logQuery: query !== '*' ? [{token: 'query', value: query}] : [],\n    });\n  };\n\n  return (\n    <RunContext.Provider value={run}>\n      <LogsProvider key={runId} runId={runId}>\n        {(logs) => (\n          <>\n            <OnLogsLoaded trace={trace} />\n            <RunMetadataProvider logs={logs}>\n              {(metadata) => (\n                <RunWithData\n                  run={run}\n                  runId={runId}\n                  logs={logs}\n                  logsFilter={logsFilter}\n                  metadata={metadata}\n                  selectionQuery={selectionQuery}\n                  onSetLogsFilter={setLogsFilter}\n                  onSetSelectionQuery={onSetSelectionQuery}\n                  onShowStateDetails={onShowStateDetails}\n                />\n              )}\n            </RunMetadataProvider>\n          </>\n        )}\n      </LogsProvider>\n    </RunContext.Provider>\n  );\n};\n\nconst OnLogsLoaded = ({trace}: {trace: RunRootTrace}) => {\n  React.useLayoutEffect(() => {\n    trace.onLogsLoaded();\n  }, [trace]);\n  return null;\n};\n\ninterface RunWithDataProps {\n  run?: RunPageFragment;\n  runId: string;\n  selectionQuery: string;\n  logs: LogsProviderLogs;\n  logsFilter: LogFilter;\n  metadata: IRunMetadataDict;\n  onSetLogsFilter: (v: LogFilter) => void;\n  onSetSelectionQuery: (query: string) => void;\n  onShowStateDetails: (stepKey: string, logs: RunDagsterRunEventFragment[]) => void;\n}\n\nconst logTypeFromQuery = (queryLogType: string) => {\n  switch (queryLogType) {\n    case 'stdout':\n      return LogType.stdout;\n    case 'stderr':\n      return LogType.stderr;\n    default:\n      return LogType.structured;\n  }\n};\n\n/**\n * Note: There are two places we keep a \"step query string\" in the Run view:\n * selectionQuery and logsFilter.logsQuery.\n *\n * - selectionQuery is set when you click around in the Gannt view and is the\n *   selection used for re-execution, etc. When set, we autofill logsFilter.logsQuery.\n *\n * - logsFilter.logsQuery is used for filtering the logs. It can be cleared separately\n *   from the selectionQuery, so you can select a step but navigate elsewhere in the logs.\n *\n * We could revisit this in the future but I believe we iterated quite a bit to get to this\n * solution and we should avoid locking the two filter inputs together completely.\n */\nconst RunWithData = ({\n  run,\n  runId,\n  logs,\n  logsFilter,\n  metadata,\n  selectionQuery,\n  onSetLogsFilter,\n  onSetSelectionQuery,\n}: RunWithDataProps) => {\n  const [queryLogType, setQueryLogType] = useQueryPersistedState<string>({\n    queryKey: 'logType',\n    defaults: {logType: LogType.structured},\n  });\n\n  const logType = logTypeFromQuery(queryLogType);\n  const setLogType = (lt: LogType) => setQueryLogType(LogType[lt]);\n  const [computeLogUrl, setComputeLogUrl] = React.useState<string | null>(null);\n\n  const stepKeysJSON = JSON.stringify(Object.keys(metadata.steps).sort());\n  const stepKeys = React.useMemo(() => JSON.parse(stepKeysJSON), [stepKeysJSON]);\n\n  const runtimeGraph = run?.executionPlan && toGraphQueryItems(run?.executionPlan, metadata.steps);\n\n  const selectionStepKeys = React.useMemo(() => {\n    return runtimeGraph && selectionQuery && selectionQuery !== '*'\n      ? filterByQuery(runtimeGraph, selectionQuery).all.map((n) => n.name)\n      : [];\n  }, [runtimeGraph, selectionQuery]);\n\n  const supportsCapturedLogs = useSupportsCapturedLogs();\n  const {logCaptureInfo, computeLogFileKey, setComputeLogFileKey} =\n    useComputeLogFileKeyForSelection({\n      stepKeys,\n      selectionStepKeys,\n      metadata,\n      defaultToFirstStep: false,\n    });\n\n  const logsFilterStepKeys = runtimeGraph\n    ? logsFilter.logQuery\n        .filter((v) => v.token && v.token === 'query')\n        .reduce((accum, v) => {\n          return [...accum, ...filterByQuery(runtimeGraph, v.value).all.map((n) => n.name)];\n        }, [] as string[])\n    : [];\n\n  const onClickStep = (stepKey: string, evt: React.MouseEvent<any>) => {\n    const index = selectionStepKeys.indexOf(stepKey);\n    let newSelected: string[];\n    const filterForExactStep = `\"${stepKey}\"`;\n    if (evt.shiftKey) {\n      // shift-click to multi select steps, preserving quotations if present\n      newSelected = [\n        ...selectionStepKeys.map((k) => (selectionQuery.includes(`\"${k}\"`) ? `\"${k}\"` : k)),\n      ];\n\n      if (index !== -1) {\n        // deselect the step if already selected\n        newSelected.splice(index, 1);\n      } else {\n        // select the step otherwise\n        newSelected.push(filterForExactStep);\n      }\n    } else {\n      if (selectionStepKeys.length === 1 && index !== -1) {\n        // deselect the step if already selected\n        newSelected = [];\n      } else {\n        // select the step otherwise\n        newSelected = [filterForExactStep];\n\n        // When only one step is selected, set the compute log key as well.\n        const matchingLogKey = matchingComputeLogKeyFromStepKey(metadata.logCaptureSteps, stepKey);\n        matchingLogKey && setComputeLogFileKey(matchingLogKey);\n      }\n    }\n\n    onSetSelectionQuery(newSelected.join(', ') || '*');\n  };\n\n  const [splitPanelContainer, setSplitPanelContainer] = React.useState<null | SplitPanelContainer>(\n    null,\n  );\n  React.useEffect(() => {\n    const initialSize = splitPanelContainer?.getSize();\n    switch (initialSize) {\n      case 100:\n        setExpandedPanel('top');\n        return;\n      case 0:\n        setExpandedPanel('bottom');\n        return;\n    }\n  }, [splitPanelContainer]);\n\n  const [expandedPanel, setExpandedPanel] = React.useState<null | 'top' | 'bottom'>(null);\n  const isTopExpanded = expandedPanel === 'top';\n  const isBottomExpanded = expandedPanel === 'bottom';\n\n  const expandBottomPanel = () => {\n    splitPanelContainer?.onChangeSize(0);\n    setExpandedPanel('bottom');\n  };\n  const expandTopPanel = () => {\n    splitPanelContainer?.onChangeSize(100);\n    setExpandedPanel('top');\n  };\n  const resetPanels = () => {\n    splitPanelContainer?.onChangeSize(50);\n    setExpandedPanel(null);\n  };\n\n  const gantt = (metadata: IRunMetadataDict) => {\n    if (!run) {\n      return <GanttChartLoadingState runId={runId} />;\n    }\n\n    if (run.status === 'QUEUED') {\n      return <QueuedState run={run} />;\n    }\n\n    if (run.executionPlan && runtimeGraph) {\n      return (\n        <ErrorBoundary region=\"gantt chart\">\n          <GanttChart\n            options={{\n              mode: GanttChartMode.WATERFALL_TIMED,\n            }}\n            toolbarActions={\n              <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n                <Tooltip content={isTopExpanded ? 'Collapse' : 'Expand'}>\n                  <Button\n                    icon={<Icon name={isTopExpanded ? 'collapse_arrows' : 'expand_arrows'} />}\n                    onClick={isTopExpanded ? resetPanels : expandTopPanel}\n                  />\n                </Tooltip>\n                <RunActionButtons\n                  run={run}\n                  graph={runtimeGraph}\n                  metadata={metadata}\n                  selection={{query: selectionQuery, keys: selectionStepKeys}}\n                />\n              </Box>\n            }\n            runId={runId}\n            graph={runtimeGraph}\n            metadata={metadata}\n            selection={{query: selectionQuery, keys: selectionStepKeys}}\n            onClickStep={onClickStep}\n            onSetSelection={onSetSelectionQuery}\n            focusedTime={logsFilter.focusedTime}\n          />\n        </ErrorBoundary>\n      );\n    }\n\n    return <NonIdealState icon=\"error\" title=\"Unable to build execution plan\" />;\n  };\n\n  return (\n    <>\n      <SplitPanelContainer\n        ref={(container) => {\n          setSplitPanelContainer(container);\n        }}\n        axis=\"vertical\"\n        identifier=\"run-gantt\"\n        firstInitialPercent={35}\n        firstMinSize={56}\n        first={gantt(metadata)}\n        second={\n          <ErrorBoundary region=\"logs\">\n            <LogsContainer>\n              <LogsToolbar\n                logType={logType}\n                onSetLogType={setLogType}\n                filter={logsFilter}\n                onSetFilter={onSetLogsFilter}\n                steps={stepKeys}\n                metadata={metadata}\n                computeLogFileKey={computeLogFileKey}\n                onSetComputeLogKey={setComputeLogFileKey}\n                computeLogUrl={computeLogUrl}\n                counts={logs.counts}\n                isSectionExpanded={isBottomExpanded}\n                toggleExpanded={isBottomExpanded ? resetPanels : expandBottomPanel}\n              />\n              {logType !== LogType.structured ? (\n                !computeLogFileKey ? (\n                  <NoStepSelectionState type={logType} />\n                ) : supportsCapturedLogs ? (\n                  <CapturedOrExternalLogPanel\n                    logKey={computeLogFileKey ? [runId, 'compute_logs', computeLogFileKey] : []}\n                    logCaptureInfo={logCaptureInfo}\n                    visibleIOType={LogType[logType]}\n                    onSetDownloadUrl={setComputeLogUrl}\n                  />\n                ) : (\n                  <ComputeLogPanel\n                    runId={runId}\n                    computeLogFileKey={stepKeys.length ? computeLogFileKey : undefined}\n                    ioType={LogType[logType]}\n                    setComputeLogUrl={setComputeLogUrl}\n                  />\n                )\n              ) : (\n                <LogsScrollingTable\n                  logs={logs}\n                  filter={logsFilter}\n                  filterStepKeys={logsFilterStepKeys}\n                  filterKey={`${JSON.stringify(logsFilter)}`}\n                  metadata={metadata}\n                />\n              )}\n            </LogsContainer>\n          </ErrorBoundary>\n        }\n      />\n    </>\n  );\n};\n\nconst LogsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst NoStepSelectionState = ({type}: {type: LogType}) => {\n  return (\n    <Box\n      flex={{\n        direction: 'row',\n        grow: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      style={{background: colorBackgroundDefault()}}\n    >\n      <NonIdealState\n        title={`Select a step to view ${type}`}\n        icon=\"warning\"\n        description=\"Select a step on the Gantt chart or from the dropdown above to view logs.\"\n      />\n    </Box>\n  );\n};\n","import {useMutation} from '@apollo/client';\nimport {Button, Group, Icon, Menu, MenuItem, Popover, Tooltip} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {AppContext} from '../app/AppContext';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useCopyToClipboard} from '../app/browser';\nimport {FREE_CONCURRENCY_SLOTS_MUTATION} from '../instance/InstanceConcurrency';\nimport {\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n} from '../instance/types/InstanceConcurrency.types';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {workspacePipelineLinkForRun, workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {DeletionDialog} from './DeletionDialog';\nimport {RunConfigDialog} from './RunConfigDialog';\nimport {doneStatuses} from './RunStatuses';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {TerminationDialog} from './TerminationDialog';\nimport {RunFragment} from './types/RunFragments.types';\n\ntype VisibleDialog = 'config' | 'delete' | 'terminate' | 'free_slots' | null;\n\nexport const RunHeaderActions = ({run, isJob}: {run: RunFragment; isJob: boolean}) => {\n  const {runConfigYaml} = run;\n  const [visibleDialog, setVisibleDialog] = React.useState<VisibleDialog>(null);\n\n  const {rootServerURI} = React.useContext(AppContext);\n  const {refetch} = React.useContext(RunsQueryRefetchContext);\n\n  const copy = useCopyToClipboard();\n  const history = useHistory();\n\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  const copyConfig = async () => {\n    copy(runConfigYaml);\n    await showSharedToaster({\n      intent: 'success',\n      icon: 'copy_to_clipboard_done',\n      message: 'Copied!',\n    });\n  };\n\n  const freeConcurrencySlots = async () => {\n    const resp = await freeSlots({variables: {runId: run.id}});\n    if (resp.data?.freeConcurrencySlots) {\n      await showSharedToaster({\n        intent: 'success',\n        icon: 'check_circle',\n        message: 'Freed concurrency slots',\n      });\n    }\n  };\n\n  const jobLink = workspacePipelineLinkForRun({\n    repositoryName: run.repositoryOrigin?.repositoryName,\n    repositoryLocationName: run.repositoryOrigin?.repositoryLocationName,\n    run,\n    isJob,\n  });\n\n  return (\n    <div>\n      <Group direction=\"row\" spacing={8}>\n        {jobLink.disabledReason ? (\n          <Tooltip content={jobLink.disabledReason} useDisabledButtonTooltipFix>\n            <Button icon={<Icon name={jobLink.icon} />} disabled>\n              {jobLink.label}\n            </Button>\n          </Tooltip>\n        ) : (\n          <AnchorButton icon={<Icon name={jobLink.icon} />} to={jobLink.to}>\n            {jobLink.label}\n          </AnchorButton>\n        )}\n        <Button icon={<Icon name=\"tag\" />} onClick={() => setVisibleDialog('config')}>\n          View tags and config\n        </Button>\n        <Popover\n          position=\"bottom-right\"\n          content={\n            <Menu>\n              <Tooltip\n                content=\"Loadable in dagster-webserver-debug\"\n                position=\"left\"\n                targetTagName=\"div\"\n              >\n                <MenuItem\n                  text=\"Download debug file\"\n                  icon={<Icon name=\"download_for_offline\" />}\n                  onClick={() => window.open(`${rootServerURI}/download_debug/${run.id}`)}\n                />\n              </Tooltip>\n              {run.hasConcurrencyKeySlots && doneStatuses.has(run.status) ? (\n                <MenuItem\n                  text=\"Free concurrency slots\"\n                  icon={<Icon name=\"lock\" />}\n                  onClick={freeConcurrencySlots}\n                />\n              ) : null}\n              {run.hasDeletePermission ? (\n                <MenuItem\n                  icon=\"delete\"\n                  text=\"Delete\"\n                  intent=\"danger\"\n                  onClick={() => setVisibleDialog('delete')}\n                />\n              ) : null}\n            </Menu>\n          }\n        >\n          <Button icon={<Icon name=\"expand_more\" />} />\n        </Popover>\n      </Group>\n      <RunConfigDialog\n        isOpen={visibleDialog === 'config'}\n        onClose={() => setVisibleDialog(null)}\n        copyConfig={() => copyConfig()}\n        mode={run.mode}\n        runConfigYaml={run.runConfigYaml}\n        tags={run.tags}\n        isJob={isJob}\n      />\n      {run.hasDeletePermission ? (\n        <DeletionDialog\n          isOpen={visibleDialog === 'delete'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            if (run.repositoryOrigin) {\n              history.push(\n                workspacePipelinePath({\n                  repoName: run.repositoryOrigin.repositoryName,\n                  repoLocation: run.repositoryOrigin.repositoryLocationName,\n                  pipelineName: run.pipelineName,\n                  isJob,\n                  path: '/runs',\n                }),\n              );\n            } else {\n              setVisibleDialog(null);\n            }\n          }}\n          onTerminateInstead={() => setVisibleDialog('terminate')}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {run.hasTerminatePermission ? (\n        <TerminationDialog\n          isOpen={visibleDialog === 'terminate'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            refetch();\n          }}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport {useStartTrace} from '../performance';\n\nexport const useRunRootTrace = () => {\n  const trace = useStartTrace('RunRoot');\n  return React.useMemo(() => {\n    let logsLoaded = false;\n    let runsLoaded = false;\n    function onLoaded() {\n      if (logsLoaded && runsLoaded) {\n        trace.endTrace();\n      }\n    }\n    return {\n      onLogsLoaded() {\n        logsLoaded = true;\n        onLoaded();\n      },\n      onRunLoaded() {\n        runsLoaded = true;\n        onLoaded();\n      },\n    };\n  }, [trace]);\n};\n\nexport type RunRootTrace = ReturnType<typeof useRunRootTrace>;\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nimport {RunTimingDetails} from './RunTimingDetails';\nimport {RunTimingFragment} from './types/RunTimingDetails.types';\n\nexport const RunTimingTags = ({loading, run}: {loading: boolean; run: RunTimingFragment}) => {\n  return (\n    <>\n      {run?.startTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"schedule\">\n            <TimestampDisplay\n              timestamp={run.startTime}\n              timeFormat={{showSeconds: true, showTimezone: false}}\n            />\n          </Tag>\n        </Popover>\n      ) : run.updateTime ? (\n        <Tag icon=\"schedule\">\n          <TimestampDisplay\n            timestamp={run.updateTime}\n            timeFormat={{showSeconds: true, showTimezone: false}}\n          />\n        </Tag>\n      ) : undefined}\n      {run?.startTime && run?.endTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"timer\">\n            <span style={{fontVariantNumeric: 'tabular-nums'}}>\n              {run?.startTime\n                ? formatElapsedTimeWithoutMsec(\n                    (run?.endTime * 1000 || Date.now()) - run?.startTime * 1000,\n                  )\n                : '–'}\n            </span>\n          </Tag>\n        </Popover>\n      ) : null}\n    </>\n  );\n};\n","import {ButtonLink, MiddleTruncate, Tag} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {InstigationSelector} from '../graphql/types';\nimport {TickDetailsDialog} from '../instigation/TickDetailsDialog';\n\nimport {DagsterTag} from './RunTag';\n\ninterface Props {\n  instigationSelector: InstigationSelector;\n  instigationType: DagsterTag.SensorName | DagsterTag.ScheduleName;\n  tickId: string;\n}\n\nexport const TickTagForRun = ({instigationSelector, instigationType, tickId}: Props) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const icon = instigationType === DagsterTag.ScheduleName ? 'schedule' : 'sensors';\n  const {name} = instigationSelector;\n\n  return (\n    <>\n      <Tag icon={icon}>\n        <span>\n          Launched by{' '}\n          <ButtonLink onClick={() => setIsOpen(true)}>\n            <div style={{maxWidth: '140px'}}>\n              <MiddleTruncate text={name} />\n            </div>\n          </ButtonLink>\n        </span>\n      </Tag>\n      <TickDetailsDialog\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        instigationSelector={instigationSelector}\n        tickId={Number(tickId)}\n      />\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, FontFamily, Heading, NonIdealState, PageHeader, Tag} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {AutomaterializeTagWithEvaluation} from '../assets/AutomaterializeTagWithEvaluation';\nimport {InstigationSelector} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\nimport {AssetKeyTagCollection, AssetCheckTagCollection} from './AssetTagCollections';\nimport {Run} from './Run';\nimport {RUN_PAGE_FRAGMENT} from './RunFragments';\nimport {RunHeaderActions} from './RunHeaderActions';\nimport {RunRootTrace, useRunRootTrace} from './RunRootTrace';\nimport {RunStatusTag} from './RunStatusTag';\nimport {DagsterTag} from './RunTag';\nimport {RunTimingTags} from './RunTimingTags';\nimport {assetKeysForRun} from './RunUtils';\nimport {TickTagForRun} from './TickTagForRun';\nimport {RunRootQuery, RunRootQueryVariables} from './types/RunRoot.types';\n\nexport const RunRoot = () => {\n  useTrackPageView();\n\n  const trace = useRunRootTrace();\n  const {runId} = useParams<{runId: string}>();\n  useDocumentTitle(runId ? `Run ${runId.slice(0, 8)}` : 'Run');\n\n  const {data, loading} = useQuery<RunRootQuery, RunRootQueryVariables>(RUN_ROOT_QUERY, {\n    variables: {runId},\n  });\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data.pipelineRunOrError : null;\n  const snapshotID = run?.pipelineSnapshotId;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const repoAddress = repoMatch?.match\n    ? buildRepoAddress(repoMatch.match.repository.name, repoMatch.match.repositoryLocation.name)\n    : null;\n\n  const isJob = React.useMemo(\n    () => !!(run && repoMatch && isThisThingAJob(repoMatch.match, run.pipelineName)),\n    [run, repoMatch],\n  );\n\n  const automaterializeTag = React.useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.AssetEvaluationID) || null,\n    [run],\n  );\n\n  React.useLayoutEffect(() => {\n    if (!loading) {\n      trace.onRunLoaded();\n    }\n  }, [loading, trace]);\n\n  const tickDetails = React.useMemo(() => {\n    if (repoAddress) {\n      const tags = run?.tags || [];\n      const tickTag = tags.find((tag) => tag.key === DagsterTag.TickId);\n\n      if (tickTag) {\n        const scheduleOrSensor = tags.find(\n          (tag) => tag.key === DagsterTag.ScheduleName || tag.key === DagsterTag.SensorName,\n        );\n        if (scheduleOrSensor) {\n          const instigationSelector: InstigationSelector = {\n            name: scheduleOrSensor.value,\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n          };\n          return {\n            tickId: tickTag.value,\n            instigationType: scheduleOrSensor.key as\n              | DagsterTag.ScheduleName\n              | DagsterTag.SensorName,\n            instigationSelector,\n          };\n        }\n      }\n    }\n\n    return null;\n  }, [run, repoAddress]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <Box\n        flex={{direction: 'row', alignItems: 'flex-start'}}\n        style={{\n          position: 'relative',\n          zIndex: 1,\n        }}\n      >\n        <PageHeader\n          title={\n            <Heading style={{fontFamily: FontFamily.monospace, fontSize: '20px'}}>\n              {runId.slice(0, 8)}\n            </Heading>\n          }\n          tags={\n            run ? (\n              <Box flex={{direction: 'row', alignItems: 'flex-start', gap: 12, wrap: 'wrap'}}>\n                <RunStatusTag status={run.status} />\n                {!isHiddenAssetGroupJob(run.pipelineName) ? (\n                  <Tag icon=\"run\">\n                    Run of{' '}\n                    <PipelineReference\n                      pipelineName={run?.pipelineName}\n                      pipelineHrefContext={repoAddress || 'repo-unknown'}\n                      snapshotId={snapshotID}\n                      size=\"small\"\n                      isJob={isJob}\n                    />\n                  </Tag>\n                ) : null}\n                {tickDetails ? (\n                  <TickTagForRun\n                    instigationSelector={tickDetails.instigationSelector}\n                    instigationType={tickDetails.instigationType}\n                    tickId={tickDetails.tickId}\n                  />\n                ) : null}\n                <AssetKeyTagCollection\n                  useTags\n                  assetKeys={\n                    isHiddenAssetGroupJob(run.pipelineName)\n                      ? assetKeysForRun(run)\n                      : run.assets.map((a) => a.key)\n                  }\n                />\n                <AssetCheckTagCollection useTags assetChecks={run.assetCheckSelection} />\n                <RunTimingTags run={run} loading={loading} />\n                {automaterializeTag && run.assetSelection?.length ? (\n                  <AutomaterializeTagWithEvaluation\n                    assetKeys={run.assetSelection}\n                    evaluationId={automaterializeTag.value}\n                  />\n                ) : null}\n              </Box>\n            ) : null\n          }\n          right={run ? <RunHeaderActions run={run} isJob={isJob} /> : null}\n        />\n      </Box>\n      <RunById data={data} runId={runId} trace={trace} />\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunRoot;\n\nconst RunById = (props: {data: RunRootQuery | undefined; runId: string; trace: RunRootTrace}) => {\n  const {data, runId, trace} = props;\n\n  if (!data || !data.pipelineRunOrError) {\n    return <Run run={undefined} runId={runId} trace={trace} />;\n  }\n\n  if (data.pipelineRunOrError.__typename !== 'Run') {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No run found\"\n          description=\"The run with this ID does not exist or has been cleaned up.\"\n        />\n      </Box>\n    );\n  }\n\n  return <Run run={data.pipelineRunOrError} runId={runId} trace={trace} />;\n};\n\nconst RUN_ROOT_QUERY = gql`\n  query RunRootQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        ...RunPageFragment\n      }\n    }\n  }\n\n  ${RUN_PAGE_FRAGMENT}\n`;\n"],"names":["COLLATOR","Intl","Collator","navigator","language","sensitivity","AutomaterializeTagWithEvaluation","param","assetKeys","evaluationId","sortedKeys","React","_to_consumable_array","_","sort","a","b","compare","path","join","jsx_runtime","jsx","Popover","placement","content","jsxs","div","style","width","Box","padding","vertical","horizontal","border","fontWeight","flex","direction","gap","maxHeight","overflowY","map","assetKey","url","assetDetailsPathForKey","view","evaluation","left","right","justifyContent","alignItems","overflow","Icon","name","MiddleTruncate","text","Link","to","whiteSpace","interactionKind","Tag","icon","useFavicon","href","el","document","querySelector","previousHref","getAttribute","setAttribute","runStatusFavicon","status","RunStatus","FAILURE","SUCCESS","STARTING","STARTED","CANCELING","Run","props","run","runId","trace","useQueryPersistedLogFilter","logsFilter","setLogsFilter","useQueryPersistedState","queryKey","defaults","selection","selectionQuery","setSelectionQuery","useDocumentTitle","isHiddenAssetGroupJob","pipelineName","slice","concat","onShowStateDetails","stepKey","logs","errorNode","find","node","__typename","showCustomAlert","body","PythonErrorInfo","error","onSetSelectionQuery","query","_object_spread_props","_object_spread","logQuery","token","value","RunContext","Provider","LogsProvider","Fragment","OnLogsLoaded","RunMetadataProvider","metadata","RunWithData","onSetLogsFilter","onLogsLoaded","logTypeFromQuery","queryLogType","LogType","stdout","stderr","structured","logType","setQueryLogType","computeLogUrl","setComputeLogUrl","stepKeysJSON","JSON","stringify","Object","keys","steps","stepKeys","parse","runtimeGraph","executionPlan","toGraphQueryItems","selectionStepKeys","filterByQuery","all","n","supportsCapturedLogs","useSupportsCapturedLogs","useComputeLogFileKeyForSelection","defaultToFirstStep","logCaptureInfo","computeLogFileKey","setComputeLogFileKey","logsFilterStepKeys","filter","v","reduce","accum","splitPanelContainer","setSplitPanelContainer","getSize","setExpandedPanel","expandedPanel","isTopExpanded","isBottomExpanded","resetPanels","onChangeSize","SplitPanelContainer","ref","container","axis","identifier","firstInitialPercent","firstMinSize","first","QueuedState","ErrorBoundary","region","GanttChart","options","mode","GanttChartMode","WATERFALL_TIMED","toolbarActions","Tooltip","Button","onClick","RunActionButtons","graph","onClickStep","evt","newSelected","index","indexOf","filterForExactStep","shiftKey","k","includes","splice","push","length","matchingLogKey","matchingComputeLogKeyFromStepKey","logCaptureSteps","onSetSelection","focusedTime","NonIdealState","title","GanttChartLoadingState","second","LogsContainer","LogsToolbar","onSetLogType","lt","onSetFilter","onSetComputeLogKey","counts","isSectionExpanded","toggleExpanded","CapturedOrExternalLogPanel","logKey","visibleIOType","onSetDownloadUrl","ComputeLogPanel","undefined","ioType","NoStepSelectionState","type","LogsScrollingTable","filterStepKeys","filterKey","styled","withConfig","grow","background","colorBackgroundDefault","description","RunHeaderActions","isJob","runConfigYaml","visibleDialog","setVisibleDialog","rootServerURI","AppContext","refetch","RunsQueryRefetchContext","copy","useCopyToClipboard","history","useHistory","freeSlots","useMutation","FREE_CONCURRENCY_SLOTS_MUTATION","copyConfig","_async_to_generator","showSharedToaster","intent","message","_state","sent","freeConcurrencySlots","resp","variables","id","data","jobLink","workspacePipelineLinkForRun","repositoryName","repositoryOrigin","repositoryLocationName","Group","spacing","disabledReason","useDisabledButtonTooltipFix","disabled","label","AnchorButton","position","Menu","targetTagName","MenuItem","window","open","hasConcurrencyKeySlots","doneStatuses","has","hasDeletePermission","RunConfigDialog","isOpen","onClose","tags","DeletionDialog","onComplete","workspacePipelinePath","repoName","repoLocation","onTerminateInstead","selectedRuns","_define_property","canTerminate","hasTerminatePermission","TerminationDialog","useRunRootTrace","useStartTrace","onLoaded","logsLoaded","runsLoaded","endTrace","onRunLoaded","RunTimingTags","loading","startTime","RunTimingDetails","TimestampDisplay","timestamp","timeFormat","showSeconds","showTimezone","updateTime","endTime","span","fontVariantNumeric","formatElapsedTimeWithoutMsec","Date","now","TickTagForRun","instigationSelector","instigationType","tickId","setIsOpen","DagsterTag","ScheduleName","ButtonLink","maxWidth","TickDetailsDialog","Number","RunRoot","useTrackPageView","useParams","useQuery","RUN_ROOT_QUERY","pipelineRunOrError","snapshotID","pipelineSnapshotId","repoMatch","useRepositoryForRunWithParentSnapshot","repoAddress","match","buildRepoAddress","repository","repositoryLocation","isThisThingAJob","automaterializeTag","tag","key","AssetEvaluationID","tickDetails","tickTag","TickId","scheduleOrSensor","SensorName","location","display","flexDirection","minWidth","height","zIndex","PageHeader","Heading","fontFamily","FontFamily","monospace","fontSize","wrap","RunStatusTag","PipelineReference","pipelineHrefContext","snapshotId","size","AssetKeyTagCollection","useTags","assetKeysForRun","assets","AssetCheckTagCollection","assetChecks","assetCheckSelection","assetSelection","RunById","runs_RunRoot","gql","RUN_PAGE_FRAGMENT"],"sourceRoot":""}