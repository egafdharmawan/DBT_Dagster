{"version":3,"file":"static/chunks/894.21867b8bbe549354.js","mappings":"qFAsCA,IAAAA,EAAAC,EAtC+B,OAsC/B,SAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACAF,CAAA,CAAAE,EAAA,KAAAC,IAAA,CAAAF,EACA,EAAC,WAAe,eAEhBG,CAAAA,EAAAC,OAAA,CAAAP,8SCnCO,IAAMQ,gBAAkB,WAC7B,IAAMC,EAASC,CAAAA,EAAAA,EAAAA,CAAAA,EACbC,GADKF,IAAAA,CAGP,MAAO,CAAC,CAACA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMG,QAAQ,CAACC,OAAO,CACjC,EAEMF,EAA2BG,CAAAA,EAAAA,EAAAA,EAAAA,EAAGA,4LCU7B,SAASC,wBAAyEC,CAOxF,EACC,IAAsCC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAc,CAAW,iBAAM,EAAE,MAAhEC,EAA+BD,CAAAA,CAAAA,EAAAA,CAAlBE,EAAkBF,CAAAA,CAAAA,EAAAA,CACVG,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAA2C,CAACC,SAAU,QAAQ,MAAnFC,EAAqBF,CAAAA,CAAAA,EAAAA,CAAbG,EAAaH,CAAAA,CAAAA,EAAAA,CAEtBI,EAAiB,GAAAC,EAAAC,CAAA,KAAAC,EAAAD,CAAA,KAClBV,EAAQY,SAAS,GACpBN,OAAAA,EACAO,MAAOb,EAAQc,QAAQ,CAAG,IAGtBC,EAAcrB,CAAAA,EAAAA,EAAAA,CAAAA,EAAmBM,EAAQgB,KAAK,CAAE,CACpDC,KAAMjB,EAAQiB,IAAI,CAClBL,UAAWJ,EACXU,4BAA6B,EAC/B,GAGMC,EAAyC,CAC7CC,cAAe,CAAC,CAACd,EACjBe,cAAeC,EAHWC,cAAc,CAACR,EAAYtB,IAAI,EAG9B+B,MAAM,GAAKxB,EAAQc,QAAQ,CAAG,EACzDW,UAAW,WACT,IAAMC,EAAa,GAAAC,EAAAjB,CAAA,EAAGR,GACtBK,EAAUmB,EAAUE,GAAG,IACvBzB,EAAeuB,EACjB,EACAG,cAAe,WACTvB,GACFH,EAAe,SAAC2B,CAAAA,QAAY,GAAAH,EAAAjB,CAAA,EAAIoB,GAAAA,MAAAA,CAAJ,CAAaxB,EAAO,IAElD,IAAMyB,EAAahB,EAAYtB,IAAI,EAAIO,EAAQgC,mBAAmB,CAACjB,EAAYtB,IAAI,EAC9EsC,GAGLxB,EAAUwB,EACZ,EACAE,MAAO,WACL9B,EAAe,EAAE,EACjBI,EAAU2B,KAAAA,EACZ,CACF,EAEA,MAAO,CAACnB,YAAAA,EAAaI,gBAAAA,CAAe,CACtC","sources":["webpack://_N_E/../../node_modules/lodash/partition.js","webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx","webpack://_N_E/../ui-core/src/runs/useCursorPaginatedQuery.tsx","webpack://_N_E/<anon>"],"sourcesContent":["var createAggregator = require('./_createAggregator');\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n","import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n","import {useQuery} from '@apollo/client';\nimport {CursorPaginationProps} from '@dagster-io/ui-components';\nimport {DocumentNode} from 'graphql';\nimport * as React from 'react';\n\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\n\ninterface CursorPaginationQueryVariables {\n  cursor?: string | null;\n  limit?: number | null;\n}\n\n/**\n * This is a React hook that makes it easier to build paginated list views based on a GraphQL\n * query. It is intended to be used in place of Apollo's `useQuery` and assumes that the query\n * takes at least `cursor` and `limit` variables. It manages those two variables internally,\n * and you can pass additional variables via the options.\n *\n * The current pagination \"cursor\" is saved to the URL query string, which allows the user to\n * navigate \"back\" in their browser history to move to previous pages.\n *\n * The returned paginationProps expose methods for moving to the next / previous page and are\n * used by <CursorPaginationControls /> to render the pagination buttons.\n */\nexport function useCursorPaginatedQuery<T, TVars extends CursorPaginationQueryVariables>(options: {\n  query: DocumentNode;\n  nextCursorForResult: (result: T) => string | undefined;\n  skip?: boolean;\n  variables: Omit<TVars, 'cursor' | 'limit'>;\n  pageSize: number;\n  getResultArray: (result: T | undefined) => any[];\n}) {\n  const [cursorStack, setCursorStack] = React.useState<string[]>(() => []);\n  const [cursor, setCursor] = useQueryPersistedState<string | undefined>({queryKey: 'cursor'});\n\n  const queryVars: any = {\n    ...options.variables,\n    cursor,\n    limit: options.pageSize + 1,\n  };\n\n  const queryResult = useQuery<T, TVars>(options.query, {\n    skip: options.skip,\n    variables: queryVars,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const resultArray = options.getResultArray(queryResult.data);\n  const paginationProps: CursorPaginationProps = {\n    hasPrevCursor: !!cursor,\n    hasNextCursor: resultArray.length === options.pageSize + 1,\n    popCursor: () => {\n      const nextStack = [...cursorStack];\n      setCursor(nextStack.pop());\n      setCursorStack(nextStack);\n    },\n    advanceCursor: () => {\n      if (cursor) {\n        setCursorStack((current) => [...current, cursor]);\n      }\n      const nextCursor = queryResult.data && options.nextCursorForResult(queryResult.data);\n      if (!nextCursor) {\n        return;\n      }\n      setCursor(nextCursor);\n    },\n    reset: () => {\n      setCursorStack([]);\n      setCursor(undefined);\n    },\n  };\n\n  return {queryResult, paginationProps};\n}\n"],"names":["partition","createAggregator","result","value","key","push","module","exports","useCanSeeConfig","data","useQuery","INSTANCE_CONFIG_HAS_INFO","instance","hasInfo","gql","useCursorPaginatedQuery","options","React","cursorStack","setCursorStack","useQueryPersistedState","queryKey","cursor","setCursor","queryVars","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_3__","_","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_4__","variables","limit","pageSize","queryResult","query","skip","notifyOnNetworkStatusChange","paginationProps","hasPrevCursor","hasNextCursor","resultArray","getResultArray","length","popCursor","nextStack","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_6__","pop","advanceCursor","current","nextCursor","nextCursorForResult","reset","undefined"],"sourceRoot":""}