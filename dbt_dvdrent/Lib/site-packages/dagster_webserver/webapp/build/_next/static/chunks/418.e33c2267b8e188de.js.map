{"version":3,"file":"static/chunks/418.e33c2267b8e188de.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/chart.js/dist/helpers.mjs","webpack://_N_E/../../node_modules/chart.js/helpers/helpers.mjs","webpack://_N_E/../../node_modules/chartjs-plugin-zoom/dist/chartjs-plugin-zoom.esm.js","webpack://_N_E/../../node_modules/hammerjs/hammer.js","webpack://_N_E/<anon>"],"sourcesContent":["/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nexport { H as HALF_PI, b1 as INFINITY, P as PI, b0 as PITAU, b3 as QUARTER_PI, b2 as RAD_PER_DEG, T as TAU, b4 as TWO_THIRDS_PI, D as _addGrace, J as _alignPixel, S as _alignStartEnd, p as _angleBetween, b5 as _angleDiff, _ as _arrayUnique, a9 as _attachContext, at as _bezierCurveTo, aq as _bezierInterpolation, ay as _boundSegment, ao as _boundSegments, W as _capitalize, an as _computeSegments, aa as _createResolver, aL as _decimalPlaces, aU as _deprecated, ab as _descriptors, ai as _elementsEqual, A as _factorize, aN as _filterBetween, a2 as _getParentNode, q as _getStartAndCountOfVisiblePoints, I as _int16Range, ak as _isBetween, aj as _isClickEvent, a6 as _isDomSupported, $ as _isPointInArea, E as _limitValue, aM as _longestText, aO as _lookup, Z as _lookupByKey, G as _measureText, aS as _merger, aT as _mergerIf, az as _normalizeAngle, y as _parseObjectDataRadialScale, ar as _pointInLine, al as _readValueToProps, Y as _rlookupByKey, w as _scaleRangesChanged, aH as _setMinAndMaxByKey, aV as _splitKey, ap as _steppedInterpolation, as as _steppedLineTo, aC as _textX, R as _toLeftRightCenter, am as _updateBezierControlPoints, av as addRoundedRectPath, aK as almostEquals, aJ as almostWhole, C as callback, ag as clearCanvas, L as clipArea, aR as clone, c as color, h as createContext, ae as debounce, j as defined, aG as distanceBetweenPoints, au as drawPoint, aE as drawPointLegend, Q as each, e as easingEffects, B as finiteOrDefault, a_ as fontString, o as formatNumber, a0 as getAngleFromPoint, aQ as getHoverColor, a1 as getMaximumSize, X as getRelativePosition, aA as getRtlAdapter, aZ as getStyle, b as isArray, g as isFinite, a8 as isFunction, k as isNullOrUndef, x as isNumber, i as isObject, aP as isPatternOrGradient, l as listenArrayEvents, z as log10, V as merge, ac as mergeIf, aI as niceNum, aF as noop, aB as overrideTextDirection, a3 as readUsedSize, M as renderText, r as requestAnimFrame, a as resolve, f as resolveObjectKey, aD as restoreTextDirection, af as retinaScale, ah as setsEqual, s as sign, aX as splineCurve, aY as splineCurveMonotone, a5 as supportsEventListenerOptions, a4 as throttled, F as toDegrees, n as toDimension, O as toFont, aW as toFontString, a$ as toLineHeight, K as toPadding, m as toPercentage, t as toRadians, aw as toTRBL, ax as toTRBLCorners, ad as uid, N as unclipArea, u as unlistenArrayEvents, v as valueOrDefault } from './chunks/helpers.segment.mjs';\n","export * from '../dist/helpers.mjs';\n","/*!\n* chartjs-plugin-zoom v1.2.1\n* undefined\n * (c) 2016-2022 chartjs-plugin-zoom Contributors\n * Released under the MIT License\n */\nimport Hammer from 'hammerjs';\nimport { each, valueOrDefault, callback, sign } from 'chart.js/helpers';\n\nconst getModifierKey = opts => opts && opts.enabled && opts.modifierKey;\nconst keyPressed = (key, event) => key && event[key + 'Key'];\nconst keyNotPressed = (key, event) => key && !event[key + 'Key'];\n\n/**\n * @param {string|function} mode can be 'x', 'y' or 'xy'\n * @param {string} dir can be 'x' or 'y'\n * @param {import('chart.js').Chart} chart instance of the chart in question\n * @returns {boolean}\n */\nfunction directionEnabled(mode, dir, chart) {\n  if (mode === undefined) {\n    return true;\n  } else if (typeof mode === 'string') {\n    return mode.indexOf(dir) !== -1;\n  } else if (typeof mode === 'function') {\n    return mode({chart}).indexOf(dir) !== -1;\n  }\n\n  return false;\n}\n\n/**\n * Debounces calling `fn` for `delay` ms\n * @param {function} fn - Function to call. No arguments are passed.\n * @param {number} delay - Delay in ms. 0 = immediate invocation.\n * @returns {function}\n */\nfunction debounce(fn, delay) {\n  let timeout;\n  return function() {\n    clearTimeout(timeout);\n    timeout = setTimeout(fn, delay);\n    return delay;\n  };\n}\n\n/** This function use for check what axis now under mouse cursor.\n * @param {{x: number, y: number}} point - the mouse location\n * @param {import('chart.js').Chart} [chart] instance of the chart in question\n * @return {import('chart.js').Scale}\n */\nfunction getScaleUnderPoint({x, y}, chart) {\n  const scales = chart.scales;\n  const scaleIds = Object.keys(scales);\n  for (let i = 0; i < scaleIds.length; i++) {\n    const scale = scales[scaleIds[i]];\n    if (y >= scale.top && y <= scale.bottom && x >= scale.left && x <= scale.right) {\n      return scale;\n    }\n  }\n  return null;\n}\n\n/** This function return only one scale whose position is under mouse cursor and which direction is enabled.\n * If under mouse hasn't scale, then return all other scales which 'mode' is diffrent with overScaleMode.\n * So 'overScaleMode' works as a limiter to scale the user-selected scale (in 'mode') only when the cursor is under the scale,\n * and other directions in 'mode' works as before.\n * Example: mode = 'xy', overScaleMode = 'y' -> it's means 'x' - works as before, and 'y' only works for one scale when cursor is under it.\n * options.overScaleMode can be a function if user want zoom only one scale of many for example.\n * @param {string} mode - 'xy', 'x' or 'y'\n * @param {{x: number, y: number}} point - the mouse location\n * @param {import('chart.js').Chart} [chart] instance of the chart in question\n * @return {import('chart.js').Scale[]}\n */\nfunction getEnabledScalesByPoint(mode, point, chart) {\n  const scale = getScaleUnderPoint(point, chart);\n\n  if (scale && directionEnabled(mode, scale.axis, chart)) {\n    return [scale];\n  }\n\n  const enabledScales = [];\n  each(chart.scales, function(scaleItem) {\n    if (!directionEnabled(mode, scaleItem.axis, chart)) {\n      enabledScales.push(scaleItem);\n    }\n  });\n  return enabledScales;\n}\n\nconst chartStates = new WeakMap();\n\nfunction getState(chart) {\n  let state = chartStates.get(chart);\n  if (!state) {\n    state = {\n      originalScaleLimits: {},\n      updatedScaleLimits: {},\n      handlers: {},\n      panDelta: {}\n    };\n    chartStates.set(chart, state);\n  }\n  return state;\n}\n\nfunction removeState(chart) {\n  chartStates.delete(chart);\n}\n\nfunction zoomDelta(scale, zoom, center) {\n  const range = scale.max - scale.min;\n  const newRange = range * (zoom - 1);\n\n  const centerPoint = scale.isHorizontal() ? center.x : center.y;\n  // `scale.getValueForPixel()` can return a value less than the `scale.min` or\n  // greater than `scale.max` when `centerPoint` is outside chartArea.\n  const minPercent = Math.max(0, Math.min(1,\n    (scale.getValueForPixel(centerPoint) - scale.min) / range || 0\n  ));\n\n  const maxPercent = 1 - minPercent;\n\n  return {\n    min: newRange * minPercent,\n    max: newRange * maxPercent\n  };\n}\n\nfunction getLimit(state, scale, scaleLimits, prop, fallback) {\n  let limit = scaleLimits[prop];\n  if (limit === 'original') {\n    const original = state.originalScaleLimits[scale.id][prop];\n    limit = valueOrDefault(original.options, original.scale);\n  }\n  return valueOrDefault(limit, fallback);\n}\n\nfunction updateRange(scale, {min, max}, limits, zoom = false) {\n  const state = getState(scale.chart);\n  const {id, axis, options: scaleOpts} = scale;\n\n  const scaleLimits = limits && (limits[id] || limits[axis]) || {};\n  const {minRange = 0} = scaleLimits;\n  const minLimit = getLimit(state, scale, scaleLimits, 'min', -Infinity);\n  const maxLimit = getLimit(state, scale, scaleLimits, 'max', Infinity);\n\n  const cmin = Math.max(min, minLimit);\n  const cmax = Math.min(max, maxLimit);\n  const range = zoom ? Math.max(cmax - cmin, minRange) : scale.max - scale.min;\n  if (cmax - cmin !== range) {\n    if (minLimit > cmax - range) {\n      min = cmin;\n      max = cmin + range;\n    } else if (maxLimit < cmin + range) {\n      max = cmax;\n      min = cmax - range;\n    } else {\n      const offset = (range - cmax + cmin) / 2;\n      min = cmin - offset;\n      max = cmax + offset;\n    }\n  } else {\n    min = cmin;\n    max = cmax;\n  }\n  scaleOpts.min = min;\n  scaleOpts.max = max;\n\n  state.updatedScaleLimits[scale.id] = {min, max};\n\n  // return true if the scale range is changed\n  return scale.parse(min) !== scale.min || scale.parse(max) !== scale.max;\n}\n\nfunction zoomNumericalScale(scale, zoom, center, limits) {\n  const delta = zoomDelta(scale, zoom, center);\n  const newRange = {min: scale.min + delta.min, max: scale.max - delta.max};\n  return updateRange(scale, newRange, limits, true);\n}\n\nconst integerChange = (v) => v === 0 || isNaN(v) ? 0 : v < 0 ? Math.min(Math.round(v), -1) : Math.max(Math.round(v), 1);\n\nfunction existCategoryFromMaxZoom(scale) {\n  const labels = scale.getLabels();\n  const maxIndex = labels.length - 1;\n\n  if (scale.min > 0) {\n    scale.min -= 1;\n  }\n  if (scale.max < maxIndex) {\n    scale.max += 1;\n  }\n}\n\nfunction zoomCategoryScale(scale, zoom, center, limits) {\n  const delta = zoomDelta(scale, zoom, center);\n  if (scale.min === scale.max && zoom < 1) {\n    existCategoryFromMaxZoom(scale);\n  }\n  const newRange = {min: scale.min + integerChange(delta.min), max: scale.max - integerChange(delta.max)};\n  return updateRange(scale, newRange, limits, true);\n}\n\nfunction scaleLength(scale) {\n  return scale.isHorizontal() ? scale.width : scale.height;\n}\n\nfunction panCategoryScale(scale, delta, limits) {\n  const labels = scale.getLabels();\n  const lastLabelIndex = labels.length - 1;\n  let {min, max} = scale;\n  // The visible range. Ticks can be skipped, and thus not reliable.\n  const range = Math.max(max - min, 1);\n  // How many pixels of delta is required before making a step. stepSize, but limited to max 1/10 of the scale length.\n  const stepDelta = Math.round(scaleLength(scale) / Math.max(range, 10));\n  const stepSize = Math.round(Math.abs(delta / stepDelta));\n  let applied;\n  if (delta < -stepDelta) {\n    max = Math.min(max + stepSize, lastLabelIndex);\n    min = range === 1 ? max : max - range;\n    applied = max === lastLabelIndex;\n  } else if (delta > stepDelta) {\n    min = Math.max(0, min - stepSize);\n    max = range === 1 ? min : min + range;\n    applied = min === 0;\n  }\n\n  return updateRange(scale, {min, max}, limits) || applied;\n}\n\nconst OFFSETS = {\n  second: 500, // 500 ms\n  minute: 30 * 1000, // 30 s\n  hour: 30 * 60 * 1000, // 30 m\n  day: 12 * 60 * 60 * 1000, // 12 h\n  week: 3.5 * 24 * 60 * 60 * 1000, // 3.5 d\n  month: 15 * 24 * 60 * 60 * 1000, // 15 d\n  quarter: 60 * 24 * 60 * 60 * 1000, // 60 d\n  year: 182 * 24 * 60 * 60 * 1000 // 182 d\n};\n\nfunction panNumericalScale(scale, delta, limits, canZoom = false) {\n  const {min: prevStart, max: prevEnd, options} = scale;\n  const round = options.time && options.time.round;\n  const offset = OFFSETS[round] || 0;\n  const newMin = scale.getValueForPixel(scale.getPixelForValue(prevStart + offset) - delta);\n  const newMax = scale.getValueForPixel(scale.getPixelForValue(prevEnd + offset) - delta);\n  const {min: minLimit = -Infinity, max: maxLimit = Infinity} = canZoom && limits && limits[scale.axis] || {};\n  if (isNaN(newMin) || isNaN(newMax) || newMin < minLimit || newMax > maxLimit) {\n    // At limit: No change but return true to indicate no need to store the delta.\n    // NaN can happen for 0-dimension scales (either because they were configured\n    // with min === max or because the chart has 0 plottable area).\n    return true;\n  }\n  return updateRange(scale, {min: newMin, max: newMax}, limits, canZoom);\n}\n\nfunction panNonLinearScale(scale, delta, limits) {\n  return panNumericalScale(scale, delta, limits, true);\n}\n\nconst zoomFunctions = {\n  category: zoomCategoryScale,\n  default: zoomNumericalScale,\n};\n\nconst panFunctions = {\n  category: panCategoryScale,\n  default: panNumericalScale,\n  logarithmic: panNonLinearScale,\n  timeseries: panNonLinearScale,\n};\n\nfunction shouldUpdateScaleLimits(scale, originalScaleLimits, updatedScaleLimits) {\n  const {id, options: {min, max}} = scale;\n  if (!originalScaleLimits[id] || !updatedScaleLimits[id]) {\n    return true;\n  }\n  const previous = updatedScaleLimits[id];\n  return previous.min !== min || previous.max !== max;\n}\n\nfunction removeMissingScales(limits, scales) {\n  each(limits, (opt, key) => {\n    if (!scales[key]) {\n      delete limits[key];\n    }\n  });\n}\n\nfunction storeOriginalScaleLimits(chart, state) {\n  const {scales} = chart;\n  const {originalScaleLimits, updatedScaleLimits} = state;\n\n  each(scales, function(scale) {\n    if (shouldUpdateScaleLimits(scale, originalScaleLimits, updatedScaleLimits)) {\n      originalScaleLimits[scale.id] = {\n        min: {scale: scale.min, options: scale.options.min},\n        max: {scale: scale.max, options: scale.options.max},\n      };\n    }\n  });\n\n  removeMissingScales(originalScaleLimits, scales);\n  removeMissingScales(updatedScaleLimits, scales);\n  return originalScaleLimits;\n}\n\nfunction doZoom(scale, amount, center, limits) {\n  const fn = zoomFunctions[scale.type] || zoomFunctions.default;\n  callback(fn, [scale, amount, center, limits]);\n}\n\nfunction getCenter(chart) {\n  const ca = chart.chartArea;\n  return {\n    x: (ca.left + ca.right) / 2,\n    y: (ca.top + ca.bottom) / 2,\n  };\n}\n\n/**\n * @param chart The chart instance\n * @param {number | {x?: number, y?: number, focalPoint?: {x: number, y: number}}} amount The zoom percentage or percentages and focal point\n * @param {string} [transition] Which transition mode to use. Defaults to 'none'\n */\nfunction zoom(chart, amount, transition = 'none') {\n  const {x = 1, y = 1, focalPoint = getCenter(chart)} = typeof amount === 'number' ? {x: amount, y: amount} : amount;\n  const state = getState(chart);\n  const {options: {limits, zoom: zoomOptions}} = state;\n  const {mode = 'xy', overScaleMode} = zoomOptions || {};\n\n  storeOriginalScaleLimits(chart, state);\n\n  const xEnabled = x !== 1 && directionEnabled(mode, 'x', chart);\n  const yEnabled = y !== 1 && directionEnabled(mode, 'y', chart);\n  const enabledScales = overScaleMode && getEnabledScalesByPoint(overScaleMode, focalPoint, chart);\n\n  each(enabledScales || chart.scales, function(scale) {\n    if (scale.isHorizontal() && xEnabled) {\n      doZoom(scale, x, focalPoint, limits);\n    } else if (!scale.isHorizontal() && yEnabled) {\n      doZoom(scale, y, focalPoint, limits);\n    }\n  });\n\n  chart.update(transition);\n\n  callback(zoomOptions.onZoom, [{chart}]);\n}\n\nfunction getRange(scale, pixel0, pixel1) {\n  const v0 = scale.getValueForPixel(pixel0);\n  const v1 = scale.getValueForPixel(pixel1);\n  return {\n    min: Math.min(v0, v1),\n    max: Math.max(v0, v1)\n  };\n}\n\nfunction zoomRect(chart, p0, p1, transition = 'none') {\n  const state = getState(chart);\n  const {options: {limits, zoom: zoomOptions}} = state;\n  const {mode = 'xy'} = zoomOptions;\n\n  storeOriginalScaleLimits(chart, state);\n  const xEnabled = directionEnabled(mode, 'x', chart);\n  const yEnabled = directionEnabled(mode, 'y', chart);\n\n  each(chart.scales, function(scale) {\n    if (scale.isHorizontal() && xEnabled) {\n      updateRange(scale, getRange(scale, p0.x, p1.x), limits, true);\n    } else if (!scale.isHorizontal() && yEnabled) {\n      updateRange(scale, getRange(scale, p0.y, p1.y), limits, true);\n    }\n  });\n\n  chart.update(transition);\n\n  callback(zoomOptions.onZoom, [{chart}]);\n}\n\nfunction zoomScale(chart, scaleId, range, transition = 'none') {\n  storeOriginalScaleLimits(chart, getState(chart));\n  const scale = chart.scales[scaleId];\n  updateRange(scale, range, undefined, true);\n  chart.update(transition);\n}\n\nfunction resetZoom(chart, transition = 'default') {\n  const state = getState(chart);\n  const originalScaleLimits = storeOriginalScaleLimits(chart, state);\n\n  each(chart.scales, function(scale) {\n    const scaleOptions = scale.options;\n    if (originalScaleLimits[scale.id]) {\n      scaleOptions.min = originalScaleLimits[scale.id].min.options;\n      scaleOptions.max = originalScaleLimits[scale.id].max.options;\n    } else {\n      delete scaleOptions.min;\n      delete scaleOptions.max;\n    }\n  });\n  chart.update(transition);\n  callback(state.options.zoom.onZoomComplete, [{chart}]);\n}\n\nfunction getOriginalRange(state, scaleId) {\n  const original = state.originalScaleLimits[scaleId];\n  if (!original) {\n    return;\n  }\n  const {min, max} = original;\n  return valueOrDefault(max.options, max.scale) - valueOrDefault(min.options, min.scale);\n}\n\nfunction getZoomLevel(chart) {\n  const state = getState(chart);\n  let min = 1;\n  let max = 1;\n  each(chart.scales, function(scale) {\n    const origRange = getOriginalRange(state, scale.id);\n    if (origRange) {\n      const level = Math.round(origRange / (scale.max - scale.min) * 100) / 100;\n      min = Math.min(min, level);\n      max = Math.max(max, level);\n    }\n  });\n  return min < 1 ? min : max;\n}\n\nfunction panScale(scale, delta, limits, state) {\n  const {panDelta} = state;\n  // Add possible cumulative delta from previous pan attempts where scale did not change\n  const storedDelta = panDelta[scale.id] || 0;\n  if (sign(storedDelta) === sign(delta)) {\n    delta += storedDelta;\n  }\n  const fn = panFunctions[scale.type] || panFunctions.default;\n  if (callback(fn, [scale, delta, limits])) {\n    // The scale changed, reset cumulative delta\n    panDelta[scale.id] = 0;\n  } else {\n    // The scale did not change, store cumulative delta\n    panDelta[scale.id] = delta;\n  }\n}\n\nfunction pan(chart, delta, enabledScales, transition = 'none') {\n  const {x = 0, y = 0} = typeof delta === 'number' ? {x: delta, y: delta} : delta;\n  const state = getState(chart);\n  const {options: {pan: panOptions, limits}} = state;\n  const {mode = 'xy', onPan} = panOptions || {};\n\n  storeOriginalScaleLimits(chart, state);\n\n  const xEnabled = x !== 0 && directionEnabled(mode, 'x', chart);\n  const yEnabled = y !== 0 && directionEnabled(mode, 'y', chart);\n\n  each(enabledScales || chart.scales, function(scale) {\n    if (scale.isHorizontal() && xEnabled) {\n      panScale(scale, x, limits, state);\n    } else if (!scale.isHorizontal() && yEnabled) {\n      panScale(scale, y, limits, state);\n    }\n  });\n\n  chart.update(transition);\n\n  callback(onPan, [{chart}]);\n}\n\nfunction getInitialScaleBounds(chart) {\n  const state = getState(chart);\n  const scaleBounds = {};\n  for (const scaleId of Object.keys(chart.scales)) {\n    const {min, max} = state.originalScaleLimits[scaleId] || {min: {}, max: {}};\n    scaleBounds[scaleId] = {min: min.scale, max: max.scale};\n  }\n\n  return scaleBounds;\n}\n\nfunction isZoomedOrPanned(chart) {\n  const scaleBounds = getInitialScaleBounds(chart);\n  for (const scaleId of Object.keys(chart.scales)) {\n    const {min: originalMin, max: originalMax} = scaleBounds[scaleId];\n\n    if (originalMin !== undefined && chart.scales[scaleId].min !== originalMin) {\n      return true;\n    }\n\n    if (originalMax !== undefined && chart.scales[scaleId].max !== originalMax) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction removeHandler(chart, type) {\n  const {handlers} = getState(chart);\n  const handler = handlers[type];\n  if (handler && handler.target) {\n    handler.target.removeEventListener(type, handler);\n    delete handlers[type];\n  }\n}\n\nfunction addHandler(chart, target, type, handler) {\n  const {handlers, options} = getState(chart);\n  const oldHandler = handlers[type];\n  if (oldHandler && oldHandler.target === target) {\n    // already attached\n    return;\n  }\n  removeHandler(chart, type);\n  handlers[type] = (event) => handler(chart, event, options);\n  handlers[type].target = target;\n  target.addEventListener(type, handlers[type]);\n}\n\nfunction mouseMove(chart, event) {\n  const state = getState(chart);\n  if (state.dragStart) {\n    state.dragging = true;\n    state.dragEnd = event;\n    chart.update('none');\n  }\n}\n\nfunction zoomStart(chart, event, zoomOptions) {\n  const {onZoomStart, onZoomRejected} = zoomOptions;\n  if (onZoomStart) {\n    const {left: offsetX, top: offsetY} = event.target.getBoundingClientRect();\n    const point = {\n      x: event.clientX - offsetX,\n      y: event.clientY - offsetY\n    };\n    if (callback(onZoomStart, [{chart, event, point}]) === false) {\n      callback(onZoomRejected, [{chart, event}]);\n      return false;\n    }\n  }\n}\n\nfunction mouseDown(chart, event) {\n  const state = getState(chart);\n  const {pan: panOptions, zoom: zoomOptions = {}} = state.options;\n  if (keyPressed(getModifierKey(panOptions), event) || keyNotPressed(getModifierKey(zoomOptions.drag), event)) {\n    return callback(zoomOptions.onZoomRejected, [{chart, event}]);\n  }\n\n  if (zoomStart(chart, event, zoomOptions) === false) {\n    return;\n  }\n  state.dragStart = event;\n\n  addHandler(chart, chart.canvas, 'mousemove', mouseMove);\n}\n\nfunction computeDragRect(chart, mode, beginPoint, endPoint) {\n  const {left: offsetX, top: offsetY} = beginPoint.target.getBoundingClientRect();\n  const xEnabled = directionEnabled(mode, 'x', chart);\n  const yEnabled = directionEnabled(mode, 'y', chart);\n  let {top, left, right, bottom, width: chartWidth, height: chartHeight} = chart.chartArea;\n\n  if (xEnabled) {\n    left = Math.min(beginPoint.clientX, endPoint.clientX) - offsetX;\n    right = Math.max(beginPoint.clientX, endPoint.clientX) - offsetX;\n  }\n\n  if (yEnabled) {\n    top = Math.min(beginPoint.clientY, endPoint.clientY) - offsetY;\n    bottom = Math.max(beginPoint.clientY, endPoint.clientY) - offsetY;\n  }\n  const width = right - left;\n  const height = bottom - top;\n\n  return {\n    left,\n    top,\n    right,\n    bottom,\n    width,\n    height,\n    zoomX: xEnabled && width ? 1 + ((chartWidth - width) / chartWidth) : 1,\n    zoomY: yEnabled && height ? 1 + ((chartHeight - height) / chartHeight) : 1\n  };\n}\n\nfunction mouseUp(chart, event) {\n  const state = getState(chart);\n  if (!state.dragStart) {\n    return;\n  }\n\n  removeHandler(chart, 'mousemove');\n  const {mode, onZoomComplete, drag: {threshold = 0}} = state.options.zoom;\n  const rect = computeDragRect(chart, mode, state.dragStart, event);\n  const distanceX = directionEnabled(mode, 'x', chart) ? rect.width : 0;\n  const distanceY = directionEnabled(mode, 'y', chart) ? rect.height : 0;\n  const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n\n  // Remove drag start and end before chart update to stop drawing selected area\n  state.dragStart = state.dragEnd = null;\n\n  if (distance <= threshold) {\n    state.dragging = false;\n    chart.update('none');\n    return;\n  }\n\n  zoomRect(chart, {x: rect.left, y: rect.top}, {x: rect.right, y: rect.bottom}, 'zoom');\n\n  setTimeout(() => (state.dragging = false), 500);\n  callback(onZoomComplete, [{chart}]);\n}\n\nfunction wheelPreconditions(chart, event, zoomOptions) {\n  // Before preventDefault, check if the modifier key required and pressed\n  if (keyNotPressed(getModifierKey(zoomOptions.wheel), event)) {\n    callback(zoomOptions.onZoomRejected, [{chart, event}]);\n    return;\n  }\n\n  if (zoomStart(chart, event, zoomOptions) === false) {\n    return;\n  }\n\n  // Prevent the event from triggering the default behavior (eg. Content scrolling).\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n\n  // Firefox always fires the wheel event twice:\n  // First without the delta and right after that once with the delta properties.\n  if (event.deltaY === undefined) {\n    return;\n  }\n  return true;\n}\n\nfunction wheel(chart, event) {\n  const {handlers: {onZoomComplete}, options: {zoom: zoomOptions}} = getState(chart);\n\n  if (!wheelPreconditions(chart, event, zoomOptions)) {\n    return;\n  }\n\n  const rect = event.target.getBoundingClientRect();\n  const speed = 1 + (event.deltaY >= 0 ? -zoomOptions.wheel.speed : zoomOptions.wheel.speed);\n  const amount = {\n    x: speed,\n    y: speed,\n    focalPoint: {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top\n    }\n  };\n\n  zoom(chart, amount);\n\n  if (onZoomComplete) {\n    onZoomComplete();\n  }\n}\n\nfunction addDebouncedHandler(chart, name, handler, delay) {\n  if (handler) {\n    getState(chart).handlers[name] = debounce(() => callback(handler, [{chart}]), delay);\n  }\n}\n\nfunction addListeners(chart, options) {\n  const canvas = chart.canvas;\n  const {wheel: wheelOptions, drag: dragOptions, onZoomComplete} = options.zoom;\n\n  // Install listeners. Do this dynamically based on options so that we can turn zoom on and off\n  // We also want to make sure listeners aren't always on. E.g. if you're scrolling down a page\n  // and the mouse goes over a chart you don't want it intercepted unless the plugin is enabled\n  if (wheelOptions.enabled) {\n    addHandler(chart, canvas, 'wheel', wheel);\n    addDebouncedHandler(chart, 'onZoomComplete', onZoomComplete, 250);\n  } else {\n    removeHandler(chart, 'wheel');\n  }\n  if (dragOptions.enabled) {\n    addHandler(chart, canvas, 'mousedown', mouseDown);\n    addHandler(chart, canvas.ownerDocument, 'mouseup', mouseUp);\n  } else {\n    removeHandler(chart, 'mousedown');\n    removeHandler(chart, 'mousemove');\n    removeHandler(chart, 'mouseup');\n  }\n}\n\nfunction removeListeners(chart) {\n  removeHandler(chart, 'mousedown');\n  removeHandler(chart, 'mousemove');\n  removeHandler(chart, 'mouseup');\n  removeHandler(chart, 'wheel');\n  removeHandler(chart, 'click');\n}\n\nfunction createEnabler(chart, state) {\n  return function(recognizer, event) {\n    const {pan: panOptions, zoom: zoomOptions = {}} = state.options;\n    if (!panOptions || !panOptions.enabled) {\n      return false;\n    }\n    const srcEvent = event && event.srcEvent;\n    if (!srcEvent) { // Sometimes Hammer queries this with a null event.\n      return true;\n    }\n    if (!state.panning && event.pointerType === 'mouse' && (\n      keyNotPressed(getModifierKey(panOptions), srcEvent) || keyPressed(getModifierKey(zoomOptions.drag), srcEvent))\n    ) {\n      callback(panOptions.onPanRejected, [{chart, event}]);\n      return false;\n    }\n    return true;\n  };\n}\n\nfunction pinchAxes(p0, p1) {\n  // fingers position difference\n  const pinchX = Math.abs(p0.clientX - p1.clientX);\n  const pinchY = Math.abs(p0.clientY - p1.clientY);\n\n  // diagonal fingers will change both (xy) axes\n  const p = pinchX / pinchY;\n  let x, y;\n  if (p > 0.3 && p < 1.7) {\n    x = y = true;\n  } else if (pinchX > pinchY) {\n    x = true;\n  } else {\n    y = true;\n  }\n  return {x, y};\n}\n\nfunction handlePinch(chart, state, e) {\n  if (state.scale) {\n    const {center, pointers} = e;\n    // Hammer reports the total scaling. We need the incremental amount\n    const zoomPercent = 1 / state.scale * e.scale;\n    const rect = e.target.getBoundingClientRect();\n    const pinch = pinchAxes(pointers[0], pointers[1]);\n    const mode = state.options.zoom.mode;\n    const amount = {\n      x: pinch.x && directionEnabled(mode, 'x', chart) ? zoomPercent : 1,\n      y: pinch.y && directionEnabled(mode, 'y', chart) ? zoomPercent : 1,\n      focalPoint: {\n        x: center.x - rect.left,\n        y: center.y - rect.top\n      }\n    };\n\n    zoom(chart, amount);\n\n    // Keep track of overall scale\n    state.scale = e.scale;\n  }\n}\n\nfunction startPinch(chart, state) {\n  if (state.options.zoom.pinch.enabled) {\n    state.scale = 1;\n  }\n}\n\nfunction endPinch(chart, state, e) {\n  if (state.scale) {\n    handlePinch(chart, state, e);\n    state.scale = null; // reset\n    callback(state.options.zoom.onZoomComplete, [{chart}]);\n  }\n}\n\nfunction handlePan(chart, state, e) {\n  const delta = state.delta;\n  if (delta) {\n    state.panning = true;\n    pan(chart, {x: e.deltaX - delta.x, y: e.deltaY - delta.y}, state.panScales);\n    state.delta = {x: e.deltaX, y: e.deltaY};\n  }\n}\n\nfunction startPan(chart, state, event) {\n  const {enabled, overScaleMode, onPanStart, onPanRejected} = state.options.pan;\n  if (!enabled) {\n    return;\n  }\n  const rect = event.target.getBoundingClientRect();\n  const point = {\n    x: event.center.x - rect.left,\n    y: event.center.y - rect.top\n  };\n\n  if (callback(onPanStart, [{chart, event, point}]) === false) {\n    return callback(onPanRejected, [{chart, event}]);\n  }\n\n  state.panScales = overScaleMode && getEnabledScalesByPoint(overScaleMode, point, chart);\n  state.delta = {x: 0, y: 0};\n  clearTimeout(state.panEndTimeout);\n  handlePan(chart, state, event);\n}\n\nfunction endPan(chart, state) {\n  state.delta = null;\n  if (state.panning) {\n    state.panEndTimeout = setTimeout(() => (state.panning = false), 500);\n    callback(state.options.pan.onPanComplete, [{chart}]);\n  }\n}\n\nconst hammers = new WeakMap();\nfunction startHammer(chart, options) {\n  const state = getState(chart);\n  const canvas = chart.canvas;\n  const {pan: panOptions, zoom: zoomOptions} = options;\n\n  const mc = new Hammer.Manager(canvas);\n  if (zoomOptions && zoomOptions.pinch.enabled) {\n    mc.add(new Hammer.Pinch());\n    mc.on('pinchstart', () => startPinch(chart, state));\n    mc.on('pinch', (e) => handlePinch(chart, state, e));\n    mc.on('pinchend', (e) => endPinch(chart, state, e));\n  }\n\n  if (panOptions && panOptions.enabled) {\n    mc.add(new Hammer.Pan({\n      threshold: panOptions.threshold,\n      enable: createEnabler(chart, state)\n    }));\n    mc.on('panstart', (e) => startPan(chart, state, e));\n    mc.on('panmove', (e) => handlePan(chart, state, e));\n    mc.on('panend', () => endPan(chart, state));\n  }\n\n  hammers.set(chart, mc);\n}\n\nfunction stopHammer(chart) {\n  const mc = hammers.get(chart);\n  if (mc) {\n    mc.remove('pinchstart');\n    mc.remove('pinch');\n    mc.remove('pinchend');\n    mc.remove('panstart');\n    mc.remove('pan');\n    mc.remove('panend');\n    mc.destroy();\n    hammers.delete(chart);\n  }\n}\n\nvar version = \"1.2.1\";\n\nvar plugin = {\n  id: 'zoom',\n\n  version,\n\n  defaults: {\n    pan: {\n      enabled: false,\n      mode: 'xy',\n      threshold: 10,\n      modifierKey: null,\n    },\n    zoom: {\n      wheel: {\n        enabled: false,\n        speed: 0.1,\n        modifierKey: null\n      },\n      drag: {\n        enabled: false,\n        modifierKey: null\n      },\n      pinch: {\n        enabled: false\n      },\n      mode: 'xy',\n    }\n  },\n\n  start: function(chart, _args, options) {\n    const state = getState(chart);\n    state.options = options;\n\n    if (Object.prototype.hasOwnProperty.call(options.zoom, 'enabled')) {\n      console.warn('The option `zoom.enabled` is no longer supported. Please use `zoom.wheel.enabled`, `zoom.drag.enabled`, or `zoom.pinch.enabled`.');\n    }\n\n    if (Hammer) {\n      startHammer(chart, options);\n    }\n\n    chart.pan = (delta, panScales, transition) => pan(chart, delta, panScales, transition);\n    chart.zoom = (args, transition) => zoom(chart, args, transition);\n    chart.zoomScale = (id, range, transition) => zoomScale(chart, id, range, transition);\n    chart.resetZoom = (transition) => resetZoom(chart, transition);\n    chart.getZoomLevel = () => getZoomLevel(chart);\n    chart.getInitialScaleBounds = () => getInitialScaleBounds(chart);\n    chart.isZoomedOrPanned = () => isZoomedOrPanned(chart);\n  },\n\n  beforeEvent(chart) {\n    const state = getState(chart);\n    if (state.panning || state.dragging) {\n      // cancel any event handling while panning or dragging\n      return false;\n    }\n  },\n\n  beforeUpdate: function(chart, args, options) {\n    const state = getState(chart);\n    state.options = options;\n    addListeners(chart, options);\n  },\n\n  beforeDatasetsDraw: function(chart, args, options) {\n    const {dragStart, dragEnd} = getState(chart);\n\n    if (dragEnd) {\n      const {left, top, width, height} = computeDragRect(chart, options.zoom.mode, dragStart, dragEnd);\n\n      const dragOptions = options.zoom.drag;\n      const ctx = chart.ctx;\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.fillStyle = dragOptions.backgroundColor || 'rgba(225,225,225,0.3)';\n      ctx.fillRect(left, top, width, height);\n\n      if (dragOptions.borderWidth > 0) {\n        ctx.lineWidth = dragOptions.borderWidth;\n        ctx.strokeStyle = dragOptions.borderColor || 'rgba(225,225,225)';\n        ctx.strokeRect(left, top, width, height);\n      }\n      ctx.restore();\n    }\n  },\n\n  stop: function(chart) {\n    removeListeners(chart);\n\n    if (Hammer) {\n      stopHammer(chart);\n    }\n    removeState(chart);\n  },\n\n  panFunctions,\n\n  zoomFunctions\n};\n\nexport { plugin as default, pan, resetZoom, zoom, zoomScale };\n","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n"],"names":["getModifierKey","opts","enabled","modifierKey","keyPressed","key","event","keyNotPressed","directionEnabled","mode","dir","chart","undefined","indexOf","getEnabledScalesByPoint","point","scale","getScaleUnderPoint","x","y","scales","scaleIds","Object","keys","i","length","top","bottom","left","right","axis","enabledScales","helpers_segment","Q","scaleItem","push","chartStates","WeakMap","getState","state","get","originalScaleLimits","updatedScaleLimits","handlers","panDelta","set","zoomDelta","zoom","center","range","max","min","newRange","centerPoint","isHorizontal","minPercent","Math","getValueForPixel","getLimit","scaleLimits","prop","fallback","limit","original","id","v","options","updateRange","limits","scaleOpts","minRange","minLimit","Infinity","maxLimit","cmin","cmax","offset","parse","integerChange","isNaN","round","OFFSETS","second","minute","hour","day","week","month","quarter","year","panNumericalScale","delta","canZoom","prevStart","prevEnd","time","newMin","getPixelForValue","newMax","panNonLinearScale","zoomFunctions","category","existCategoryFromMaxZoom","labels","getLabels","maxIndex","default","panFunctions","applied","lastLabelIndex","stepDelta","scaleLength","width","height","stepSize","abs","logarithmic","timeseries","removeMissingScales","opt","storeOriginalScaleLimits","shouldUpdateScaleLimits","previous","doZoom","amount","fn","type","C","transition","focalPoint","getCenter","ca","chartArea","zoomOptions","overScaleMode","xEnabled","yEnabled","update","onZoom","getRange","pixel0","pixel1","v0","v1","panScale","storedDelta","s","pan","panOptions","onPan","getInitialScaleBounds","scaleBounds","scaleId","removeHandler","handler","target","removeEventListener","addHandler","oldHandler","addEventListener","mouseMove","dragStart","dragging","dragEnd","zoomStart","onZoomStart","onZoomRejected","offsetX","offsetY","getBoundingClientRect","clientX","clientY","mouseDown","drag","canvas","computeDragRect","beginPoint","endPoint","chartWidth","chartHeight","zoomX","zoomY","mouseUp","onZoomComplete","threshold","rect","distanceX","distanceY","distance","sqrt","zoomRect","p0","p1","setTimeout","wheel","wheelPreconditions","cancelable","preventDefault","deltaY","speed","handlePinch","e","pointers","zoomPercent","pinch","pinchAxes","pinchX","pinchY","p","handlePan","panning","deltaX","panScales","hammers","chartjs_plugin_zoom_esm_plugin","version","defaults","start","_args","prototype","hasOwnProperty","call","console","warn","hammer_default","startHammer","mc","Manager","add","Pinch","on","Pan","enable","recognizer","srcEvent","pointerType","onPanRejected","startPan","onPanStart","clearTimeout","panEndTimeout","onPanComplete","args","zoomScale","resetZoom","scaleOptions","getZoomLevel","origRange","getOriginalRange","level","isZoomedOrPanned","originalMin","originalMax","beforeEvent","beforeUpdate","addListeners","wheelOptions","dragOptions","addDebouncedHandler","name","delay","timeout","ownerDocument","beforeDatasetsDraw","ctx","save","beginPath","fillStyle","backgroundColor","fillRect","borderWidth","lineWidth","strokeStyle","borderColor","strokeRect","restore","stop","stopHammer","remove","destroy","delete","__WEBPACK_AMD_DEFINE_RESULT__","window","document","exportName","assign","VENDOR_PREFIXES","TEST_ELEMENT","createElement","now","Date","setTimeoutContext","context","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","forEach","deprecate","method","message","deprecationMessage","stack","replace","log","apply","arguments","output","index","source","nextKey","extend","dest","src","merge","inherit","child","base","properties","childP","baseP","create","constructor","_super","boolOrFn","val","addEventListeners","types","splitStr","removeEventListeners","hasParent","node","parent","parentNode","inStr","str","find","trim","split","inArray","findByKey","toArray","slice","uniqueArray","sort","results","values","a","b","prefixed","property","prefix","camelProp","toUpperCase","_uniqueId","getWindowForElement","element","doc","defaultView","parentWindow","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","MOBILE_REGEX","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_MOUSE","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self","inputTarget","domHandler","ev","init","inputHandler","eventType","input","session","pointersLength","firstInput","firstMultiple","offsetCenter","prevDelta","prevInput","overallVelocity","pointersLen","changedPointersLen","changedPointers","isFirst","isFinal","simpleCloneInputData","timeStamp","deltaTime","angle","getAngle","getDistance","offsetDelta","offsetDirection","getDirection","getVelocity","overallVelocityX","overallVelocityY","end","rotation","maxPointers","computeIntervalInputData","velocity","velocityX","velocityY","direction","last","lastInterval","emit","recognize","p2","props","atan2","PI","evEl","evTarget","evWin","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MouseInput","pressed","button","which","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","PointerEventInput","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","toLowerCase","storeIndex","pointerId","INPUT_END","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SingleTouchInput","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_INPUT_MAP","TouchInput","targetIds","getTouches","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","TouchMouseInput","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","isSyntheticEvent","t","dx","dy","inputEvent","inputData","isTouch","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","getTouchActionProps","touchMap","cssSupports","CSS","supports","TouchAction","value","Recognizer","val1","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","val2","recognizers","preset","inputClass","oldCssProps","touchAction","toggleCssProps","item","recognizeWith","requireFailure","cssProps","compute","actions","getTouchAction","cleanTouchActions","hasPanX","hasPanY","join","preventDefaults","prevented","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","reset","STATE_RECOGNIZED","process","STATE_BEGAN","attrTest","optionPointers","isRecognized","isValid","DIRECTION_HORIZONTAL","DIRECTION_LEFT","DIRECTION_UP","directionTest","hasMoved","inOut","validPointers","validMovement","validTime","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","force","stopped","curRecognizer","existing","events","off","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","INPUT_START","INPUT_MOVE","INPUT_CANCEL","STATE_POSSIBLE","STATE_CHANGED","STATE_ENDED","STATE_CANCELLED","STATE_FAILED","DIRECTION_NONE","DIRECTION_RIGHT","DIRECTION_DOWN","DIRECTION_VERTICAL","DIRECTION_ALL","Tap","Swipe","Rotate","Press","freeGlobal","exports","__webpack_require__","module"],"sourceRoot":""}