{"version":3,"file":"static/chunks/258.a325301256088472.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/overview/OverviewTabs.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/InstanceAutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationRoot.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfills.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPage.tsx","webpack://_N_E/../ui-core/src/overview/OverviewAssetsRoot.tsx","webpack://_N_E/../ui-core/src/instance/RepoFilterButton.tsx","webpack://_N_E/../ui-core/src/runs/useHourWindow.tsx","webpack://_N_E/../ui-core/src/instance/NextTick.tsx","webpack://_N_E/../ui-core/src/runs/useRunsForTimeline.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTimelineRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewActivityRoot.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesRoot.tsx","webpack://_N_E/../ui-core/src/instigation/Unloadable.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useCodeLocationFilter.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewRoot.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {QueryResult} from '@apollo/client';\nimport {Box, Spinner, Tabs, colorAccentBlue, colorAccentGray} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {useAutomationPolicySensorFlag} from '../assets/AutomationPolicySensorFlag';\nimport {useAutomaterializeDaemonStatus} from '../assets/useAutomaterializeDaemonStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const automaterializeSensorsFlagState = useAutomationPolicySensorFlag();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"activity\" title=\"Activity\" to=\"/overview/activity\" />\n        <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />\n        <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />\n        {automaterializeSensorsFlagState === 'has-global-amp' ? (\n          <TabLink\n            id=\"amp\"\n            title={\n              <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                <div>Auto-materialize</div>\n                {automaterialize.loading ? (\n                  <Spinner purpose=\"body-text\" />\n                ) : (\n                  <div\n                    style={{\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                      backgroundColor:\n                        automaterialize.paused === false ? colorAccentBlue() : colorAccentGray(),\n                    }}\n                  />\n                )}\n              </Box>\n            }\n            to=\"/overview/automaterialize\"\n          />\n        ) : null}\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import React from 'react';\n\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationEvaluationHistoryTable} from './AutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n  AssetDaemonTickFragment,\n} from './types/AssetDaemonTicksQuery.types';\n\nconst PAGE_SIZE = 15;\n\ninterface Props {\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n}\n\nexport const InstanceAutomaterializationEvaluationHistoryTable = ({\n  setSelectedTick,\n  setTableView,\n  setTimerange,\n  setParentStatuses,\n}: Props) => {\n  const [statuses, setStatuses] = useQueryPersistedState<Set<InstigationTickStatus>>({\n    queryKey: 'statuses',\n    decode: React.useCallback(({statuses}: {statuses?: string}) => {\n      return new Set<InstigationTickStatus>(\n        statuses\n          ? JSON.parse(statuses)\n          : [\n              InstigationTickStatus.STARTED,\n              InstigationTickStatus.SUCCESS,\n              InstigationTickStatus.FAILURE,\n              InstigationTickStatus.SKIPPED,\n            ],\n      );\n    }, []),\n    encode: React.useCallback((raw: Set<InstigationTickStatus>) => {\n      return {statuses: JSON.stringify(Array.from(raw))};\n    }, []),\n  });\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetDaemonTicksQuery,\n    AssetDaemonTicksQueryVariables\n  >({\n    query: ASSET_DAEMON_TICKS_QUERY,\n    variables: {\n      statuses: React.useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      const ticks = data.autoMaterializeTicks;\n      if (!ticks.length) {\n        return undefined;\n      }\n      return ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data?.autoMaterializeTicks) {\n        return [];\n      }\n      return data.autoMaterializeTicks;\n    },\n    pageSize: PAGE_SIZE,\n  });\n\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      const ticks = queryResult.data?.autoMaterializeTicks;\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, queryResult.data?.autoMaterializeTicks, setTimerange]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <AutomaterializationEvaluationHistoryTable\n      loading={queryResult.loading}\n      ticks={queryResult.data?.autoMaterializeTicks || []}\n      paginationProps={paginationProps}\n      setSelectedTick={setSelectedTick}\n      setStatuses={setStatuses}\n      setTableView={setTableView}\n      statuses={statuses}\n    />\n  );\n};\n","import {useLazyQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Page,\n  Checkbox,\n  Spinner,\n  Subtitle2,\n  Heading,\n  PageHeader,\n  Table,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport React, {useLayoutEffect} from 'react';\nimport {Redirect} from 'react-router-dom';\n\nimport {useConfirmation} from '../../app/CustomConfirmationProvider';\nimport {useUnscopedPermissions} from '../../app/Permissions';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {assertUnreachable} from '../../app/Util';\nimport {useTrackPageView} from '../../app/analytics';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../../instigation/LiveTickTimeline2';\nimport {isStuckStartedTick} from '../../instigation/util';\nimport {OverviewTabs} from '../../overview/OverviewTabs';\nimport {useAutomationPolicySensorFlag} from '../AutomationPolicySensorFlag';\nimport {useAutomaterializeDaemonStatus} from '../useAutomaterializeDaemonStatus';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationTickDetailDialog} from './AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from './AutomaterializeRunHistoryTable';\nimport {InstanceAutomaterializationEvaluationHistoryTable} from './InstanceAutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n  AssetDaemonTickFragment,\n} from './types/AssetDaemonTicksQuery.types';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\n// Determine whether the user is flagged to see automaterialize policies as\n// sensors. If so, redirect to the Sensors overview.\nexport const AutomaterializationRoot = () => {\n  const automaterializeSensorsFlagState = useAutomationPolicySensorFlag();\n  switch (automaterializeSensorsFlagState) {\n    case 'unknown':\n      return <div />; // Waiting for result\n    case 'has-global-amp':\n      return <GlobalAutomaterializationRoot />;\n    case 'has-sensor-amp':\n      return <Redirect to=\"/overview/sensors\" />;\n    default:\n      assertUnreachable(automaterializeSensorsFlagState);\n  }\n};\n\nconst GlobalAutomaterializationRoot = () => {\n  useTrackPageView();\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const confirm = useConfirmation();\n\n  const {permissions: {canToggleAutoMaterialize} = {}} = useUnscopedPermissions();\n\n  const [fetch, queryResult] = useLazyQuery<AssetDaemonTicksQuery, AssetDaemonTicksQueryVariables>(\n    ASSET_DAEMON_TICKS_QUERY,\n  );\n  const [isPaused, setIsPaused] = React.useState(false);\n  const [statuses, setStatuses] = React.useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = React.useState<undefined | [number, number]>(undefined);\n  const variables: AssetDaemonTicksQueryVariables = React.useMemo(() => {\n    if (timeRange || statuses) {\n      return {\n        afterTimestamp: timeRange?.[0],\n        beforeTimestamp: timeRange?.[1],\n        statuses,\n      };\n    }\n    return {\n      afterTimestamp: (Date.now() - TWENTY_MINUTES) / 1000,\n    };\n  }, [statuses, timeRange]);\n  function fetchData() {\n    fetch({\n      variables,\n    });\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(fetchData, [variables]);\n  useQueryRefreshAtInterval(queryResult, 2 * 1000, !isPaused && !timeRange && !statuses, fetchData);\n\n  const [selectedTick, setSelectedTick] = React.useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    React.useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const ids = data ? data.autoMaterializeTicks.map((tick) => `${tick.id}:${tick.status}`) : [];\n  while (ids.length < 100) {\n    // Super hacky but we need to keep the memo args length the same...\n    // And the memo below prevents us from changing the ticks reference every second\n    // which avoids a bunch of re-rendering\n    ids.push('');\n  }\n\n  const ticks = React.useMemo(\n    () => {\n      const ticks = data?.autoMaterializeTicks;\n      return (\n        ticks?.map((tick, index) => {\n          const nextTick = ticks[index - 1];\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (nextTick && isStuckStartedTick(tick, index)) {\n            const copy = {...tick};\n            copy.endTimestamp = nextTick.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...ids.slice(0, 100)],\n  );\n\n  const onHoverTick = React.useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  return (\n    <Page>\n      <PageHeader title={<Heading>Overview</Heading>} tabs={<OverviewTabs tab=\"amp\" />} />\n      <Box padding={{vertical: 12, horizontal: 24}} flex={{direction: 'column', gap: 12}}>\n        <Alert\n          intent=\"info\"\n          title=\"[Experimental] Dagster can automatically materialize assets when criteria are met.\"\n          description={\n            <>\n              Auto-materialization enables a declarative approach to asset scheduling – instead of\n              defining imperative workflows to materialize your assets, you just describe the\n              conditions under which they should be materialized.{' '}\n              <a\n                href=\"https://docs.dagster.io/concepts/assets/asset-auto-execution\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Learn more about auto-materialization here\n              </a>\n              .\n            </>\n          }\n        />\n      </Box>\n      <Table>\n        <tbody>\n          <tr>\n            <td>Running</td>\n            <td>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <Checkbox\n                  format=\"switch\"\n                  checked={!automaterialize.paused}\n                  disabled={!canToggleAutoMaterialize}\n                  onChange={async (e) => {\n                    const checked = e.target.checked;\n                    if (!checked) {\n                      await confirm({\n                        title: 'Pause Auto-materializing?',\n                        description:\n                          'Pausing Auto-materializing will prevent new materializations triggered by an Auto-materializing policy.',\n                      });\n                    }\n                    automaterialize.setPaused(!checked);\n                  }}\n                />\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Evaluation frequency</td>\n            <td>~30s</td>\n          </tr>\n        </tbody>\n      </Table>\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!data ? (\n        <Box\n          padding={{vertical: 48}}\n          flex={{direction: 'row', justifyContent: 'center', gap: 12, alignItems: 'center'}}\n        >\n          <Spinner purpose=\"body-text\" />\n          <div style={{color: colorTextLight()}}>Loading evaluations…</div>\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <InstanceAutomaterializationEvaluationHistoryTable\n              setSelectedTick={setSelectedTick}\n              setTableView={setTableView}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n            />\n          ) : (\n            <AutomaterializeRunHistoryTable setTableView={setTableView} />\n          )}\n        </>\n      )}\n    </Page>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  CursorPaginationControls,\n  NonIdealState,\n  PageHeader,\n  Heading,\n  Page,\n  Spinner,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {BulkActionStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewTabs} from '../overview/OverviewTabs';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {useFilters} from '../ui/Filters';\nimport {useStaticSetFilter} from '../ui/Filters/useStaticSetFilter';\n\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from './backfill/BackfillTable';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n  InstanceHealthForBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\n\nconst PAGE_SIZE = 10;\n\nconst labelForBackfillStatus = (key: BulkActionStatus) => {\n  switch (key) {\n    case BulkActionStatus.CANCELED:\n      return 'Canceled';\n    case BulkActionStatus.CANCELING:\n      return 'Canceling';\n    case BulkActionStatus.COMPLETED:\n      return 'Completed';\n    case BulkActionStatus.FAILED:\n      return 'Failed';\n    case BulkActionStatus.REQUESTED:\n      return 'In progress';\n  }\n};\n\nconst backfillStatusValues = Object.keys(BulkActionStatus).map((key) => {\n  const status = key as BulkActionStatus;\n  const label = labelForBackfillStatus(status);\n  return {\n    label,\n    value: status,\n    match: [status, label],\n  };\n});\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<\n    InstanceHealthForBackfillsQuery,\n    InstanceHealthForBackfillsQueryVariables\n  >(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const statusFilter = useStaticSetFilter<BulkActionStatus>({\n    name: 'Status',\n    icon: 'status',\n    allValues: backfillStatusValues,\n    allowMultipleSelections: false,\n    closeOnSelect: true,\n    renderLabel: ({value}) => <div>{labelForBackfillStatus(value)}</div>,\n    getStringValue: (status) => labelForBackfillStatus(status),\n  });\n\n  const {state: statusState} = statusFilter;\n\n  const {button, activeFiltersJsx} = useFilters({filters: [statusFilter]});\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {\n      status: statusState.size > 0 ? Array.from(statusState)[0]! : undefined,\n    },\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {loading, data} = queryResult;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box padding={{vertical: 64}} flex={{direction: 'column', alignItems: 'center'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: colorTextLight()}}>Loading backfills…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const partitionBackfillsOrError = data?.partitionBackfillsOrError;\n    if (partitionBackfillsOrError?.__typename === 'PythonError') {\n      return <PythonErrorInfo error={partitionBackfillsOrError} />;\n    }\n\n    if (!partitionBackfillsOrError || !partitionBackfillsOrError?.results.length) {\n      if (statusState.size > 0) {\n        return (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"no-results\"\n              title=\"No matching backfills\"\n              description=\"No backfills were found for this filter.\"\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"No backfills found\"\n            description=\"This instance does not have any backfill jobs.\"\n          />\n        </Box>\n      );\n    }\n\n    const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n    const backfillHealths = daemonHealths\n      .filter((daemon) => daemon.daemonType === 'BACKFILL')\n      .map((daemon) => daemon.required && daemon.healthy);\n    const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n\n    return (\n      <div>\n        {isBackfillHealthy ? null : (\n          <Box padding={{horizontal: 24, vertical: 16}}>\n            <DaemonNotRunningAlertBody />\n          </Box>\n        )}\n        <BackfillTable\n          backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n          refetch={queryResult.refetch}\n        />\n        {partitionBackfillsOrError.results.length > 0 ? (\n          <Box margin={{top: 16}}>\n            <CursorPaginationControls {...paginationProps} />\n          </Box>\n        ) : null}\n      </div>\n    );\n  };\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"backfills\" refreshState={refreshState} />}\n      />\n      <Box padding={{vertical: 12, horizontal: 20}}>\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>{button}</div>\n          {activeFiltersJsx}\n        </Box>\n      </Box>\n      {content()}\n    </Page>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($status: BulkActionStatus, $cursor: String, $limit: Int) {\n    partitionBackfillsOrError(status: $status, cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useApolloClient, useQuery} from '@apollo/client';\nimport {\n  Box,\n  ButtonLink,\n  Heading,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Spinner,\n  Table,\n  Tag,\n  colorAccentBlue,\n  colorAccentGreen,\n  colorAccentRed,\n  colorBackgroundLight,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport React from 'react';\nimport {Link, useHistory, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {asAssetKeyInput} from '../../assets/asInput';\nimport {assetDetailsPathForKey} from '../../assets/assetDetailsPathForKey';\nimport {AssetViewParams} from '../../assets/types';\nimport {AssetKey, BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT, BackfillActionsMenu} from './BackfillActionsMenu';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {TargetPartitionsDisplay} from './TargetPartitionsDisplay';\nimport {\n  BackfillPartitionsForAssetKeyQuery,\n  BackfillPartitionsForAssetKeyQueryVariables,\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n} from './types/BackfillPage.types';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {variables: {backfillId}},\n  );\n\n  const {data} = queryResult;\n\n  const backfill =\n    data?.partitionBackfillOrError.__typename === 'PartitionBackfill'\n      ? data.partitionBackfillOrError\n      : null;\n\n  // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n  const isInProgress = backfill\n    ? [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(backfill.status)\n    : true;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!data || !data.partitionBackfillOrError) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return <PythonErrorInfo error={data.partitionBackfillOrError} />;\n    }\n    if (data.partitionBackfillOrError.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={data.partitionBackfillOrError.message} />;\n    }\n\n    const backfill = data.partitionBackfillOrError;\n\n    function getRunsUrl(status: 'inProgress' | 'complete' | 'failed' | 'targeted') {\n      const filters: RunFilterToken[] = [\n        {\n          token: 'tag',\n          value: `dagster/backfill=${backfillId}`,\n        },\n      ];\n      switch (status) {\n        case 'inProgress':\n          filters.push(\n            {\n              token: 'status',\n              value: RunStatus.STARTED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.QUEUED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.STARTING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.CANCELING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.NOT_STARTED,\n            },\n          );\n          break;\n        case 'complete':\n          filters.push({\n            token: 'status',\n            value: RunStatus.SUCCESS,\n          });\n          break;\n        case 'failed':\n          filters.push({\n            token: 'status',\n            value: RunStatus.FAILURE,\n          });\n          filters.push({\n            token: 'status',\n            value: RunStatus.CANCELED,\n          });\n          break;\n      }\n      return runsPathWithFilters(filters);\n    }\n\n    const onShowAssetDetails = async (assetKey: AssetKey, isPartitioned: boolean) => {\n      let params: AssetViewParams = {};\n\n      if (isPartitioned) {\n        const resp = await client.query<\n          BackfillPartitionsForAssetKeyQuery,\n          BackfillPartitionsForAssetKeyQueryVariables\n        >({\n          query: BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY,\n          variables: {backfillId, assetKey: asAssetKeyInput(assetKey)},\n        });\n        const data =\n          resp.data.partitionBackfillOrError.__typename === 'PartitionBackfill'\n            ? resp.data.partitionBackfillOrError.partitionsTargetedForAssetKey\n            : null;\n\n        if (data && data.ranges?.length) {\n          params = {default_range: data.ranges.map((r) => `[${r.start}...${r.end}]`).join(',')};\n        }\n      }\n      return history.push(assetDetailsPathForKey(assetKey, params));\n    };\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n          data-testid={testId('backfill-page-details')}\n        >\n          <Detail\n            label=\"Created\"\n            detail={\n              <Timestamp\n                timestamp={{ms: Number(backfill.timestamp * 1000)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            }\n          />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <Duration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition selection\"\n            detail={\n              <TargetPartitionsDisplay\n                targetPartitionCount={backfill.numPartitions || 0}\n                targetPartitions={backfill.assetBackfillData?.rootTargetedPartitions}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<BackfillStatusTagForPage backfill={backfill} />} />\n        </Box>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '50%'}}>Asset name</th>\n              <th>\n                <Link to={getRunsUrl('targeted')}>Partitions targeted</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('inProgress')}>In progress</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('complete')}>Completed</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('failed')}>Failed</Link>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {backfill.assetBackfillData?.assetBackfillStatuses.map((asset) => {\n              let targeted;\n              let inProgress;\n              let completed;\n              let failed;\n              if (asset.__typename === 'AssetPartitionsStatusCounts') {\n                targeted = asset.numPartitionsTargeted;\n                inProgress = asset.numPartitionsInProgress;\n                completed = asset.numPartitionsMaterialized;\n                failed = asset.numPartitionsFailed;\n              } else {\n                targeted = 1;\n                failed = asset.failed ? 1 : 0;\n                inProgress = asset.inProgress ? 1 : 0;\n                completed = asset.materialized ? 1 : 0;\n              }\n              return (\n                <tr\n                  key={tokenForAssetKey(asset.assetKey)}\n                  data-testid={testId(`backfill-asset-row-${tokenForAssetKey(asset.assetKey)}`)}\n                >\n                  <td>\n                    <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                      <div>\n                        <ButtonLink\n                          onClick={() =>\n                            onShowAssetDetails(\n                              asset.assetKey,\n                              asset.__typename === 'AssetPartitionsStatusCounts',\n                            )\n                          }\n                        >\n                          {asset.assetKey.path.join('/')}\n                        </ButtonLink>\n                      </div>\n                      <div>\n                        <StatusBar\n                          targeted={targeted}\n                          inProgress={inProgress}\n                          completed={completed}\n                          failed={failed}\n                        />\n                      </div>\n                    </Box>\n                  </td>\n                  {asset.__typename === 'AssetPartitionsStatusCounts' ? (\n                    <>\n                      <td>{targeted}</td>\n                      <td>{inProgress}</td>\n                      <td>{completed}</td>\n                      <td>{failed}</td>\n                    </>\n                  ) : (\n                    <>\n                      <td>-</td>\n                      <td>\n                        {inProgress ? (\n                          <Tag icon=\"spinner\" intent=\"primary\">\n                            In progress\n                          </Tag>\n                        ) : (\n                          '-'\n                        )}\n                      </td>\n                      <td>{completed ? <Tag intent=\"success\">Completed</Tag> : '-'}</td>\n                      <td>{failed ? <Tag intent=\"danger\">Failed</Tag> : '-'}</td>\n                    </>\n                  )}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={\n          <Heading>\n            <Link to=\"/overview/backfills\" style={{color: colorTextLight()}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </Heading>\n        }\n        right={\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            {isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n            {backfill ? (\n              <BackfillActionsMenu\n                backfill={backfill}\n                refetch={queryResult.refetch}\n                canCancelRuns={backfill.status === BulkActionStatus.REQUESTED}\n              />\n            ) : null}\n          </Box>\n        }\n      />\n      {content()}\n    </Page>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nfunction StatusBar({\n  targeted,\n  inProgress,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  inProgress: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: colorBackgroundLight(),\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * inProgress) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: colorAccentGreen()}} />\n      <div style={{background: colorAccentRed()}} />\n      <div style={{background: colorAccentBlue()}} />\n    </div>\n  );\n}\n\nconst Label = styled.div`\n  color: ${colorTextLight()};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst Duration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = React.useReducer((s: number, _: any) => s + 1, 0);\n  React.useEffect(() => {\n    if (end) {\n      return;\n    }\n    // re-render once a minute to update the \"time ago\"\n    const intervalId = setInterval(rerender, 60000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  return <span>{formatDuration(duration)}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...PartitionBackfillFragment\n      ...PythonErrorFragment\n      ... on BackfillNotFoundError {\n        message\n      }\n    }\n  }\n\n  fragment PartitionBackfillFragment on PartitionBackfill {\n    id\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    ...BackfillActionsBackfillFragment\n\n    error {\n      ...PythonErrorFragment\n    }\n    assetBackfillData {\n      rootTargetedPartitions {\n        partitionKeys\n        ranges {\n          start\n          end\n        }\n      }\n      assetBackfillStatuses {\n        ... on AssetPartitionsStatusCounts {\n          assetKey {\n            path\n          }\n          numPartitionsTargeted\n          numPartitionsInProgress\n          numPartitionsMaterialized\n          numPartitionsFailed\n        }\n        ... on UnpartitionedAssetStatus {\n          assetKey {\n            path\n          }\n          inProgress\n          materialized\n          failed\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n\nexport const BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY = gql`\n  query BackfillPartitionsForAssetKey($backfillId: String!, $assetKey: AssetKeyInput!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionsTargetedForAssetKey(assetKey: $assetKey) {\n          partitionKeys\n          ranges {\n            start\n            end\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst formatDuration = (duration: number) => {\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  let result = '';\n  if (days > 0) {\n    result += `${days}d `;\n    result += `${hours}h`;\n  } else if (hours > 0) {\n    result += `${hours}h `;\n    result += `${minutes}m`;\n  } else if (minutes > 0) {\n    result += `${minutes}m `;\n    result += `${seconds}s`;\n  }\n  return result.trim();\n};\n","import {useQuery} from '@apollo/client';\nimport {\n  Box,\n  Caption,\n  Icon,\n  MenuItem,\n  Select,\n  Spinner,\n  Tag,\n  TextInput,\n  colorAccentGreen,\n  colorBackgroundDefault,\n  colorBorderDefault,\n  colorTextDefault,\n  colorTextLight,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetsLiveData} from '../asset-data/AssetLiveDataProvider';\nimport {StatusCase, buildAssetNodeStatusContent} from '../asset-graph/AssetNodeStatusContent';\nimport {displayNameForAssetKey, tokenForAssetKey} from '../asset-graph/Utils';\nimport {partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {ASSET_CATALOG_TABLE_QUERY} from '../assets/AssetsCatalogTable';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {\n  AssetCatalogTableQuery,\n  AssetCatalogTableQueryVariables,\n} from '../assets/types/AssetsCatalogTable.types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {Container, HeaderCell, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewAssetsRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Assets');\n\n  const query = useQuery<AssetCatalogTableQuery, AssetCatalogTableQueryVariables>(\n    ASSET_CATALOG_TABLE_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const refreshState = useQueryRefreshAtInterval(query, FIFTEEN_SECONDS);\n\n  const groupedAssetsUnfiltered = React.useMemo(() => {\n    if (query.data?.assetsOrError.__typename === 'AssetConnection') {\n      const assets = query.data.assetsOrError.nodes;\n      return groupAssets(assets);\n    }\n    return [];\n  }, [query.data?.assetsOrError]);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'q',\n    decode: (qs) => (qs.searchQuery ? JSON.parse(qs.searchQuery) : ''),\n    encode: (searchQuery) => ({searchQuery: searchQuery ? JSON.stringify(searchQuery) : undefined}),\n  });\n\n  const groupedAssets = React.useMemo(() => {\n    if (searchValue === '') {\n      return groupedAssetsUnfiltered;\n    }\n    return groupedAssetsUnfiltered.filter((group) => {\n      return (\n        (group.groupName || UNGROUPED_ASSETS).toLowerCase().includes(searchValue.toLowerCase()) ||\n        group.repositoryName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    });\n  }, [groupedAssetsUnfiltered, searchValue]);\n\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groupedAssets.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 82,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  function content() {\n    const result = query.data?.assetsOrError;\n    if (!query.data && query.loading) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (result?.__typename === 'PythonError') {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <PythonErrorInfo error={result} />\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column'}} style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualHeaderRow />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const group = groupedAssets[index]!;\n              return <VirtualRow key={key} start={start} height={size} group={group} />;\n            })}\n          </Inner>\n        </Container>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'sticky', top: 0, zIndex: 1}}>\n        <Header refreshState={refreshState} />\n        <Box\n          padding={{horizontal: 24, vertical: 16}}\n          flex={{alignItems: 'center', gap: 12, grow: 0}}\n        >\n          <TabButton selected=\"assets\" />\n          <TextInput\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n            }}\n            placeholder=\"Filter asset groups…\"\n          />\n        </Box>\n      </div>\n      {content()}\n    </>\n  );\n};\n\ntype Assets = Extract<\n  AssetCatalogTableQuery['assetsOrError'],\n  {__typename: 'AssetConnection'}\n>['nodes'];\n\nfunction groupAssets(assets: Assets) {\n  const groups: Record<\n    string,\n    {\n      groupName: string | null;\n      repositoryName: string;\n      assets: Assets;\n    }\n  > = {};\n\n  assets.forEach((asset) => {\n    if (!asset.definition) {\n      return;\n    }\n    const groupName = asset.definition.groupName;\n    const repositoryName = asset.definition.repository.name;\n    const key = `${groupName}||${repositoryName}`;\n    const target = groups[key] || {\n      groupName,\n      repositoryName,\n      assets: [] as Assets,\n    };\n    target.assets.push(asset);\n    groups[key] = target;\n  });\n  return Object.values(groups);\n}\n\nconst TEMPLATE_COLUMNS = '5fr 1fr 1fr 1fr 1fr';\n\nfunction VirtualHeaderRow() {\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: colorTextLight(),\n        position: 'sticky',\n        top: 0,\n        zIndex: 1,\n        background: colorBackgroundDefault(),\n      }}\n    >\n      <HeaderCell>Group name</HeaderCell>\n      <HeaderCell>Missing</HeaderCell>\n      <HeaderCell>Failed/Overdue</HeaderCell>\n      <HeaderCell>In progress</HeaderCell>\n      <HeaderCell>Materialized</HeaderCell>\n    </Box>\n  );\n}\n\nconst UNGROUPED_ASSETS = 'Ungrouped Assets';\ntype RowProps = {\n  height: number;\n  start: number;\n  group: ReturnType<typeof groupAssets>[0];\n};\nfunction VirtualRow({height, start, group}: RowProps) {\n  const assetKeys = React.useMemo(\n    () => group.assets.map((asset) => ({path: asset.key.path})),\n    [group.assets],\n  );\n\n  const {liveDataByNode} = useAssetsLiveData(assetKeys);\n\n  const statuses = React.useMemo(() => {\n    type assetType = (typeof group)['assets'][0];\n    type StatusesType = {asset: assetType; status: ReturnType<typeof buildAssetNodeStatusContent>};\n    const statuses = {\n      successful: [] as StatusesType[],\n      failed: [] as StatusesType[],\n      inprogress: [] as StatusesType[],\n      missing: [] as StatusesType[],\n      loading: false,\n    };\n    if (!Object.keys(liveDataByNode).length) {\n      statuses.loading = true;\n      return statuses;\n    }\n    Object.keys(liveDataByNode).forEach((key) => {\n      const assetLiveData = liveDataByNode[key];\n      const asset = group.assets.find((asset) => tokenForAssetKey(asset.key) === key);\n      if (!asset?.definition) {\n        console.warn('Expected a definition for asset with key', key);\n        return;\n      }\n      const status = buildAssetNodeStatusContent({\n        assetKey: asset.key,\n        definition: asset.definition,\n        liveData: assetLiveData,\n        expanded: true,\n      });\n      switch (status.case) {\n        case StatusCase.LOADING:\n          statuses.loading = true;\n          break;\n        case StatusCase.SOURCE_OBSERVING:\n          statuses.inprogress.push({asset, status});\n          break;\n        case StatusCase.SOURCE_OBSERVED:\n          statuses.successful.push({asset, status});\n          break;\n        case StatusCase.SOURCE_NEVER_OBSERVED:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.SOURCE_NO_STATE:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.MATERIALIZING:\n          statuses.inprogress.push({asset, status});\n          break;\n        case StatusCase.LATE_OR_FAILED:\n          statuses.failed.push({asset, status});\n          break;\n        case StatusCase.NEVER_MATERIALIZED:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.MATERIALIZED:\n          statuses.successful.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_FAILED:\n          statuses.failed.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_MISSING:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_MATERIALIZED:\n          statuses.successful.push({asset, status});\n          break;\n      }\n    });\n    return statuses;\n  }, [liveDataByNode, group.assets]);\n\n  const repo = group.assets.find((asset) => asset.definition?.repository)?.definition?.repository;\n  const repoAddress = buildRepoAddress(repo?.name || '', repo?.location.name || '');\n\n  const {containerProps, viewport} = useViewport();\n\n  const isBatchStillLoading = assetKeys.length !== Object.keys(liveDataByNode).length;\n  const zeroOrBlank = isBatchStillLoading ? '' : '0';\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <Cell>\n          <Box flex={{direction: 'row', justifyContent: 'space-between', grow: 1}}>\n            <Box flex={{direction: 'column', gap: 2, grow: 1}}>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <Icon name=\"asset_group\" />\n                {group.groupName ? (\n                  <Link\n                    style={{fontWeight: 700}}\n                    to={workspacePathFromAddress(repoAddress, `/asset-groups/${group.groupName}`)}\n                  >\n                    {group.groupName}\n                  </Link>\n                ) : (\n                  UNGROUPED_ASSETS\n                )}\n              </Box>\n              <div {...containerProps}>\n                <RepositoryLinkWrapper maxWidth={viewport.width}>\n                  <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                </RepositoryLinkWrapper>\n              </div>\n            </Box>\n            <Box flex={{direction: 'column', justifyContent: 'center'}}>\n              {isBatchStillLoading ? <Spinner purpose=\"body-text\" /> : null}\n            </Box>\n          </Box>\n        </Cell>\n        <Cell>\n          {statuses.missing.length ? (\n            <SelectOnHover\n              assets={statuses.missing}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MISSING) {\n                  return status.numMissing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"missing\"\n            >\n              <Tag intent=\"none\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: '12px',\n                      height: '12px',\n                      border: `2px solid ${colorBorderDefault()}`,\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.missing.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.failed.length ? (\n            <SelectOnHover\n              assets={statuses.failed}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_FAILED) {\n                  return status.numFailed || 0;\n                }\n                return 0;\n              }}\n              adjective=\"failed\"\n            >\n              <Tag intent=\"danger\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderLeft: '6px solid transparent',\n                      borderRight: '6px solid transparent',\n                      borderBottom: '10px solid red',\n                      display: 'inline-block',\n                    }}\n                  />\n                  {statuses.failed.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.inprogress.length ? (\n            <SelectOnHover\n              assets={statuses.inprogress}\n              getCount={({status}) => {\n                if (status.case === StatusCase.MATERIALIZING) {\n                  return status.numMaterializing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materializing\"\n            >\n              <Tag intent=\"primary\" icon=\"spinner\">\n                {statuses.inprogress.length}\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.successful.length ? (\n            <SelectOnHover\n              assets={statuses.successful}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MATERIALIZED) {\n                  return status.numMaterialized || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materialized\"\n            >\n              <Tag intent=\"success\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      backgroundColor: colorAccentGreen(),\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.successful.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n      </RowGrid>\n    </Row>\n  );\n}\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    vertical-align: middle;\n  }\n`;\n\nconst Cell = ({children}: {children: React.ReactNode}) => {\n  return (\n    <RowCell style={{color: colorTextDefault()}}>\n      <Box flex={{direction: 'row', alignItems: 'center', grow: 1}}>{children}</Box>\n    </RowCell>\n  );\n};\n\nconst RepositoryLinkWrapper = styled.div<{maxWidth?: number}>`\n  font-size: 12px;\n  pointer-events: none;\n  a {\n    color: ${colorTextLight()};\n    pointer-events: none;\n    max-width: ${({maxWidth}) => (maxWidth ? 'unset' : `${maxWidth}px`)};\n  }\n`;\n\ntype AssetWithStatusType = {\n  asset: Assets[0];\n  status: ReturnType<typeof buildAssetNodeStatusContent>;\n};\nfunction SelectOnHover({\n  assets,\n  children,\n  getCount,\n  adjective,\n}: {\n  assets: AssetWithStatusType[];\n  children: React.ReactNode;\n  getCount: (asset: AssetWithStatusType) => number;\n  adjective: string;\n}) {\n  return (\n    <SelectWrapper>\n      <Select\n        items={assets}\n        itemPredicate={(query, item) =>\n          displayNameForAssetKey(item.asset.key)\n            .toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase())\n        }\n        itemRenderer={(item) => {\n          const count = getCount(item);\n          return (\n            <LinkWithNoUnderline to={assetDetailsPathForKey(item.asset.key)} target=\"_blank\">\n              <MenuItem\n                key={displayNameForAssetKey(item.asset.key)}\n                text={\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                    <div style={{paddingLeft: '4px'}}>\n                      <Icon name=\"asset\" />\n                    </div>\n                    <div\n                      style={{overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis'}}\n                    >\n                      {displayNameForAssetKey(item.asset.key)}\n                    </div>\n                    {count && count > 0 ? (\n                      <Caption style={{color: colorTextLight()}}>\n                        {partitionCountString(count)} {adjective}\n                      </Caption>\n                    ) : null}\n                  </Box>\n                }\n              />\n            </LinkWithNoUnderline>\n          );\n        }}\n        onItemSelect={() => {}}\n      >\n        {children}\n      </Select>\n    </SelectWrapper>\n  );\n}\n\nconst SelectWrapper = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst LinkWithNoUnderline = styled(Link)`\n  &:hover {\n    text-decoration: none;\n  }\n`;\n","import {Box, Button, DialogFooter, DialogHeader, Dialog, Icon} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton = () => {\n  const {allRepos, visibleRepos, toggleVisible} = React.useContext(WorkspaceContext);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        outlined\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import * as React from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagster.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = React.useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(HOUR_WINDOW_KEY, validate);\n  const setHourWindowWithDefault = React.useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return React.useMemo(\n    () => [hourWindow, setHourWindowWithDefault],\n    [hourWindow, setHourWindowWithDefault],\n  );\n};\n","import {gql} from '@apollo/client';\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {isHiddenAssetGroupJob, __ASSET_JOB_PREFIX} from '../asset-graph/Utils';\nimport {InstigationStatus, RunsFilter, RunStatus} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {RunTimelineQuery, RunTimelineQueryVariables} from './types/useRunsForTimeline.types';\n\nexport const useRunsForTimeline = (range: [number, number], runsFilter: RunsFilter = {}) => {\n  const [start, end] = range;\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const queryData = useQuery<RunTimelineQuery, RunTimelineQueryVariables>(RUN_TIMELINE_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    // With a very large number of runs, operating on the Apollo cache is too expensive and\n    // can block the main thread. This data has to be up-to-the-second fresh anyway, so just\n    // skip the cache entirely.\n    fetchPolicy: 'no-cache',\n    variables: {\n      inProgressFilter: {\n        ...runsFilter,\n        statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n        createdBefore: endSec,\n      },\n      terminatedFilter: {\n        ...runsFilter,\n        statuses: Array.from(doneStatuses),\n        createdBefore: endSec,\n        updatedAfter: startSec,\n      },\n      tickCursor: startSec,\n      ticksUntil: endSec,\n    },\n  });\n\n  const {data, previousData, loading} = queryData;\n\n  const initialLoading = loading && !data;\n  const {unterminated, terminated, workspaceOrError} = data || previousData || {};\n\n  const runsByJobKey = React.useMemo(() => {\n    const map: {[jobKey: string]: TimelineRun[]} = {};\n    const now = Date.now();\n\n    // fetch all the runs in the given range\n    [\n      ...(unterminated?.__typename === 'Runs' ? unterminated.results : []),\n      ...(terminated?.__typename === 'Runs' ? terminated.results : []),\n    ].forEach((run) => {\n      if (!run.startTime) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      if (\n        !overlap(\n          {start, end},\n          {\n            start: run.startTime * 1000,\n            end: run.endTime ? run.endTime * 1000 : now,\n          },\n        )\n      ) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = [\n        ...(map[runJobKey] || []),\n        {\n          id: run.id,\n          status: run.status,\n          startTime: run.startTime * 1000,\n          endTime: run.endTime ? run.endTime * 1000 : now,\n        },\n      ];\n    });\n\n    return map;\n  }, [end, unterminated, terminated, start]);\n\n  const jobsWithRuns: TimelineJob[] = React.useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename !== 'Workspace') {\n      return [];\n    }\n\n    const jobs: TimelineJob[] = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        locationEntry.__typename !== 'WorkspaceLocationEntry' ||\n        locationEntry.locationOrLoadError?.__typename !== 'RepositoryLocation'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (startTime > now && overlap({start, end}, {start: startTime, end: startTime})) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = runsByJobKey[jobKey] || [];\n          if (!jobTicks.length && !jobRuns.length) {\n            continue;\n          }\n\n          const jobsAndTicksToAdd = [...jobRuns, ...jobTicks];\n          if (isAdHoc) {\n            const adHocJobs = jobs.find(\n              (job) => job.jobType === 'asset' && job.repoAddress === repoAddress,\n            );\n            if (adHocJobs) {\n              adHocJobs.runs.push(...jobsAndTicksToAdd);\n              continue;\n            }\n          }\n\n          jobs.push({\n            key: jobKey,\n            jobName,\n            jobType: isAdHoc ? 'asset' : 'job',\n            repoAddress,\n            path: workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: pipeline.name,\n              isJob: pipeline.isJob,\n            }),\n            runs: [...jobRuns, ...jobTicks],\n          } as TimelineJob);\n        }\n      }\n    }\n\n    const earliest = jobs.reduce(\n      (accum, job) => {\n        const startTimes = job.runs.map((job) => job.startTime);\n        return {...accum, [job.key]: Math.min(...startTimes)};\n      },\n      {} as {[jobKey: string]: number},\n    );\n\n    return jobs.sort((a, b) => earliest[a.key]! - earliest[b.key]!);\n  }, [workspaceOrError, runsByJobKey, start, end]);\n\n  return React.useMemo(\n    () => ({\n      jobs: jobsWithRuns,\n      initialLoading,\n      queryData,\n    }),\n    [initialLoading, jobsWithRuns, queryData],\n  );\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${jobName}-${repoAddressAsHumanString(repoAddress)}`;\n\nconst RUN_TIMELINE_QUERY = gql`\n  query RunTimelineQuery(\n    $inProgressFilter: RunsFilter!\n    $terminatedFilter: RunsFilter!\n    $tickCursor: Float\n    $ticksUntil: Float\n  ) {\n    unterminated: runsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    terminated: runsOrError(filter: $terminatedFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {Box, TextInput, Button, ButtonGroup, ErrorBoundary} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {useStartTrace} from '../performance';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {useHourWindow, HourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 60 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\n\nexport const OverviewTimelineRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n  const trace = useStartTrace('OverviewTimelineRoot');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const [hourWindow, setHourWindow] = useHourWindow('12');\n  const [now, setNow] = React.useState(() => Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  React.useEffect(() => {\n    setNow(Date.now());\n    const timer = setInterval(() => {\n      setNow(Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  const range: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + LOOKAHEAD_HOURS * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, offsetMsec],\n  );\n\n  const {jobs, initialLoading, queryData} = useRunsForTimeline(range);\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n\n  React.useEffect(() => {\n    if (!initialLoading) {\n      trace.endTrace();\n    }\n  }, [initialLoading, trace]);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(\n    () => jobs.filter(({key}) => visibleJobKeys.has(key)),\n    [jobs, visibleJobKeys],\n  );\n\n  return (\n    <>\n      <Header refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          <TabButton selected=\"timeline\" />\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={initialLoading} range={range} jobs={visibleJobs} />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import {PageHeader, Heading, Box, JoinedButtons} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ActivatableButton} from '../runs/RunListTabs';\n\nimport {OverviewAssetsRoot} from './OverviewAssetsRoot';\nimport {OverviewTabs} from './OverviewTabs';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\n\nexport const OverviewActivityRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Activity');\n\n  const header = React.useCallback(\n    ({refreshState}: {refreshState: React.ComponentProps<typeof OverviewTabs>['refreshState']}) => (\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"activity\" refreshState={refreshState} />}\n      />\n    ),\n    [],\n  );\n\n  const [defaultTab, setDefaultTab] = useStateWithStorage<'timeline' | 'assets'>(\n    'overview-activity-tab',\n    (json) => (['timeline', 'assets'].includes(json) ? json : 'timeline'),\n  );\n\n  const tabButton = React.useCallback(\n    ({selected}: {selected: 'timeline' | 'assets'}) => {\n      if (defaultTab !== selected) {\n        setDefaultTab(selected);\n      }\n      return (\n        <JoinedButtons>\n          <ActivatableButton $active={selected === 'timeline'} to=\"/overview/activity/timeline\">\n            Timeline\n          </ActivatableButton>\n          <ActivatableButton $active={selected === 'assets'} to=\"/overview/activity/assets\">\n            Assets\n          </ActivatableButton>\n        </JoinedButtons>\n      );\n    },\n    [defaultTab, setDefaultTab],\n  );\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Switch>\n        <Route path=\"/overview/activity/assets\">\n          <OverviewAssetsRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route path=\"/overview/activity/timeline\">\n          <OverviewTimelineRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route\n          path=\"*\"\n          render={React.useCallback(\n            () =>\n              defaultTab === 'timeline' ? (\n                <Redirect to=\"/overview/activity/timeline\" />\n              ) : (\n                <Redirect to=\"/overview/activity/assets\" />\n              ),\n            [defaultTab],\n          )}\n        />\n      </Switch>\n    </Box>\n  );\n};\n","import * as React from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [value, setValue] = React.useState(false);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setValue(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return value;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewJobsTable} from './OverviewJobsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/OverviewJobsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: colorTextLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"jobs\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable = ({repos}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedResourceHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.resourceCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: colorTextLight()}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"resources\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? (\n              <SearchInputSpinner tooltipContent=\"Loading resources…\" />\n            ) : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (data?: OverviewResourcesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  id\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {useMutation} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Checkbox,\n  Group,\n  Table,\n  Subheading,\n  Tooltip,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {InstigationStatus} from '../graphql/types';\nimport {\n  displayScheduleMutationErrors,\n  STOP_SCHEDULE_MUTATION,\n} from '../schedules/ScheduleMutations';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {displaySensorMutationErrors, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {InstigatorSelectorInformation} from '../workspace/RepositoryInformation';\n\nimport {InstigatedRunStatus} from './InstigationUtils';\nimport {InstigationStateFragment} from './types/InstigationUtils.types';\n\nexport const UnloadableSensors = ({\n  sensorStates,\n  showSubheading = true,\n}: {\n  sensorStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}) => {\n  if (!sensorStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable sensors</Subheading> : null}\n        <UnloadableSensorInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Sensor name</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sensorStates.map((sensorState) => (\n            <SensorStateRow sensorState={sensorState} key={sensorState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport const UnloadableSchedules = ({\n  scheduleStates,\n  showSubheading = true,\n}: {\n  scheduleStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}) => {\n  if (!scheduleStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable schedules</Subheading> : null}\n        <UnloadableScheduleInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Schedule name</th>\n            <th style={{width: '150px'}}>Schedule</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n            <th>Partition set status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {scheduleStates.map((scheduleState) => (\n            <ScheduleStateRow scheduleState={scheduleState} key={scheduleState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nconst UnloadableSensorInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following sensors, but you cannot turn them back on.{' '}\n      </div>\n    }\n    description={\n      <div>\n        The following sensors were previously started but now cannot be loaded. They may be part of\n        a different workspace or from a sensor or code location that no longer exists in code. You\n        can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst UnloadableScheduleInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following schedules, but you cannot turn them back on.\n      </div>\n    }\n    description={\n      <div>\n        The following schedules were previously started but now cannot be loaded. They may be part\n        of a different workspace or from a schedule or code location that no longer exists in code.\n        You can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst SensorStateRow = ({sensorState}: {sensorState: InstigationStateFragment}) => {\n  const {id, selectorId, name, status, ticks, hasStopPermission} = sensorState;\n\n  const [stopSensor, {loading: toggleOffInFlight}] = useMutation<\n    StopRunningSensorMutation,\n    StopRunningSensorMutationVariables\n  >(STOP_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const confirm = useConfirmation();\n\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to turn off this sensor?',\n        description:\n          'The definition for this sensor is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSensor({variables: {jobOriginId: id, jobSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !hasStopPermission;\n  const latestTick = ticks.length ? ticks[0] : null;\n\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        disabled={toggleOffInFlight || status === InstigationStatus.STOPPED || lacksPermission}\n        checked={status === InstigationStatus.RUNNING}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          {name}\n        </Group>\n        <InstigatorSelectorInformation instigatorState={sensorState} />\n      </td>\n      <td>\n        {latestTick ? (\n          <TickStatusTag tick={latestTick} />\n        ) : (\n          <span style={{color: colorTextLight()}}>None</span>\n        )}\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>\n          <InstigatedRunStatus instigationState={sensorState} />\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nconst ScheduleStateRow = ({scheduleState}: {scheduleState: InstigationStateFragment}) => {\n  const [stopSchedule, {loading: toggleOffInFlight}] = useMutation<\n    StopScheduleMutation,\n    StopScheduleMutationVariables\n  >(STOP_SCHEDULE_MUTATION, {\n    onCompleted: displayScheduleMutationErrors,\n  });\n  const confirm = useConfirmation();\n  const {id, selectorId, name, ticks, status, typeSpecificData} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n  const cronSchedule =\n    typeSpecificData && typeSpecificData.__typename === 'ScheduleData'\n      ? typeSpecificData.cronSchedule\n      : null;\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to stop this schedule?',\n        description:\n          'The definition for this schedule is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSchedule({variables: {scheduleOriginId: id, scheduleSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !scheduleState.hasStopPermission;\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        checked={status === InstigationStatus.RUNNING}\n        disabled={status !== InstigationStatus.RUNNING || toggleOffInFlight || lacksPermission}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          <div>{name}</div>\n        </Group>\n        <InstigatorSelectorInformation instigatorState={scheduleState} />\n      </td>\n      <td style={{maxWidth: 150}}>\n        <div\n          style={{\n            position: 'relative',\n            width: '100%',\n            whiteSpace: 'pre-wrap',\n            display: 'block',\n          }}\n        >\n          {cronSchedule ? (\n            <Tooltip position=\"bottom\" content={cronSchedule}>\n              {humanCronString(cronSchedule)}\n            </Tooltip>\n          ) : (\n            <div>&mdash;</div>\n          )}\n        </div>\n      </td>\n      <td>{latestTick ? <TickStatusTag tick={latestTick} /> : null}</td>\n      <td>\n        <InstigatedRunStatus instigationState={scheduleState} />\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>&mdash;</div>\n      </td>\n    </tr>\n  );\n};\n","import * as React from 'react';\n\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {WorkspaceContext} from '../../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\n\nimport {useStaticSetFilter} from './useStaticSetFilter';\n\nexport const useCodeLocationFilter = () => {\n  const {allRepos, visibleRepos, setVisible, setHidden} = React.useContext(WorkspaceContext);\n\n  const allRepoAddresses = React.useMemo(() => {\n    return allRepos.map((repo) =>\n      buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n    );\n  }, [allRepos]);\n\n  const visibleRepoAddresses = React.useMemo(() => {\n    return visibleRepos.length === allRepos.length\n      ? []\n      : visibleRepos.map((repo) =>\n          buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n        );\n  }, [allRepos, visibleRepos]);\n\n  return useStaticSetFilter<RepoAddress>({\n    name: 'Code location',\n    icon: 'folder',\n    initialState: visibleRepoAddresses,\n    allValues: allRepoAddresses.map((repoAddress) => {\n      return {value: repoAddress, match: [repoAddressAsHumanString(repoAddress)]};\n    }),\n    getKey: (repoAddress) => repoAddressAsHumanString(repoAddress),\n    renderLabel: ({value}) => (\n      <TruncatedTextWithFullTextOnHover text={repoAddressAsHumanString(value)} />\n    ),\n    getStringValue: (value) => repoAddressAsHumanString(value),\n    onStateChanged: (state: Set<RepoAddress>) => {\n      if (state.size === 0) {\n        setVisible(allRepoAddresses);\n        return;\n      }\n\n      const hidden = allRepoAddresses.filter((repoAddress) => !state.has(repoAddress));\n      setHidden(hidden);\n      setVisible(Array.from(state));\n    },\n    menuWidth: '500px',\n  });\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\n\ntype ScheduleInfo = {name: string; scheduleState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: ScheduleInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: ScheduleInfo};\n\nexport const OverviewScheduleTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((schedule) => {\n          flat.push({type: 'schedule', repoAddress, schedule});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={\n                          row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                        }\n                        placement=\"top\"\n                      >\n                        <Tag>{row.scheduleCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const scheduleKey = makeScheduleKey(row.repoAddress, row.schedule.name);\n\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.schedule.name}\n                  scheduleState={row.schedule.scheduleState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(scheduleKey)}\n                  onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {ScheduleBulkActionMenu} from '../schedules/ScheduleBulkActionMenu';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n  UnloadableSchedulesQuery,\n  UnloadableSchedulesQueryVariables,\n} from './types/OverviewSchedulesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = React.useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = React.useMemo(() => {\n    return repoBuckets.map(({schedules, ...rest}) => {\n      return {\n        ...rest,\n        schedules: runningState.size\n          ? schedules.filter(({scheduleState}) => runningState.has(scheduleState.status))\n          : schedules,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySchedulesVisible = React.useMemo(\n    () => filteredBySearch.some(({schedules}) => schedules.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all schedules across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSchedules = React.useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, schedules}) => {\n        return schedules\n          .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n          .map(({name, scheduleState}) => ({\n            repoAddress,\n            scheduleName: name,\n            scheduleState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedScheduleKeys = React.useMemo(() => {\n    return allPermissionedSchedules.map(({repoAddress, scheduleName}) =>\n      makeScheduleKey(repoAddress, scheduleName),\n    );\n  }, [allPermissionedSchedules]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedScheduleKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = React.useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules}) => {\n          return schedules.map(({name}) => makeScheduleKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedScheduleKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedScheduleKeys, filteredBySearch]);\n\n  // Determine the list of schedule objects that have been checked by the viewer.\n  // These are the schedules that will be operated on by the bulk start/stop action.\n  const checkedSchedules = React.useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSchedules.filter(({repoAddress, scheduleName}) => {\n      return checkedKeysOnScreen.has(makeScheduleKey(repoAddress, scheduleName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSchedules, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedScheduleKeys.length > 0;\n  const checkedCount = checkedSchedules.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: colorTextLight()}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No matching schedules were found in the selected code locations'\n                : 'No matching schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewScheduleTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"schedules\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading schedules…\" />\n              ) : undefined\n            }\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n              onToggleAll(false);\n            }}\n            placeholder=\"Filter by schedule name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySchedulesVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <ScheduleBulkActionMenu\n            schedules={checkedSchedules}\n            onDone={() => refreshState.refetch()}\n          />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSchedulesAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSchedulesAlert = ({count}: {count: number}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable schedule' : `${count} unloadable schedules`;\n\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 24}} border=\"top\">\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Schedules were previously started but now cannot be loaded. They may be part of a\n                code locations that no longer exist. You can turn them off, but you cannot turn them\n                back on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable schedule' : 'View unloadable schedules'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableScheduleDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableScheduleDialog = () => {\n  const {data} = useQuery<UnloadableSchedulesQuery, UnloadableSchedulesQueryVariables>(\n    UNLOADABLE_SCHEDULES_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSchedules\n        scheduleStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: {name: string; scheduleState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name, scheduleState}) => ({name, scheduleState}));\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                  scheduleState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SCHEDULES_QUERY = gql`\n  query UnloadableSchedulesQuery {\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\n\ntype SensorInfo = {name: string; sensorState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: SensorInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: SensorInfo};\n\nexport const OverviewSensorTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((sensor) => {\n          flat.push({type: 'sensor', repoAddress, sensor});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                        placement=\"top\"\n                      >\n                        <Tag>{row.sensorCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const sensorKey = makeSensorKey(row.repoAddress, row.sensor.name);\n\n              return (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.sensor.name}\n                  sensorState={row.sensor.sensorState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(sensorKey)}\n                  onToggleChecked={onToggleCheckFactory(sensorKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {SensorBulkActionMenu} from '../sensors/SensorBulkActionMenu';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSensorsQuery,\n  OverviewSensorsQueryVariables,\n  UnloadableSensorsQuery,\n  UnloadableSensorsQueryVariables,\n} from './types/OverviewSensorsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = React.useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = React.useMemo(() => {\n    return repoBuckets.map(({sensors, ...rest}) => {\n      return {\n        ...rest,\n        sensors: runningState.size\n          ? sensors.filter(({sensorState}) => runningState.has(sensorState.status))\n          : sensors,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySensorsVisible = React.useMemo(\n    () => filteredBySearch.some(({sensors}) => sensors.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all sensors across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSensors = React.useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, sensors}) => {\n        return sensors\n          .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n          .map(({name, sensorState}) => ({\n            repoAddress,\n            sensorName: name,\n            sensorState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedSensorKeys = React.useMemo(() => {\n    return allPermissionedSensors.map(({repoAddress, sensorName}) =>\n      makeSensorKey(repoAddress, sensorName),\n    );\n  }, [allPermissionedSensors]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] =\n    useSelectionReducer(allPermissionedSensorKeys);\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = React.useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, sensors}) => {\n          return sensors.map(({name}) => makeSensorKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedSensorKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedSensorKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedSensors = React.useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSensors.filter(({repoAddress, sensorName}) => {\n      return checkedKeysOnScreen.has(makeSensorKey(repoAddress, sensorName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSensors, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedSensorKeys.length > 0;\n  const checkedCount = checkedSensors.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: colorTextLight()}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewSensorTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"sensors\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading sensors…\" />\n              ) : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by sensor name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySensorsVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <SensorBulkActionMenu sensors={checkedSensors} onDone={() => refreshState.refetch()} />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSensorsAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSensorsAlert = ({count}: {count: number}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable sensor' : `${count} unloadable sensors`;\n\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 24}} border=\"top\">\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Sensors were previously started but now cannot be loaded. They may be part of a code\n                location that no longer exists. You can turn them off, but you cannot turn them back\n                on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable sensor' : 'View unloadable sensors'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableSensorDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableSensorDialog = () => {\n  const {data} = useQuery<UnloadableSensorsQuery, UnloadableSensorsQueryVariables>(\n    UNLOADABLE_SENSORS_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSensors\n        sensorStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  sensors: {name: string; sensorState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSensorsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                  sensorState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SENSORS_QUERY = gql`\n  query UnloadableSensorsQuery {\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {AutomaterializationRoot} from '../assets/auto-materialization/AutomaterializationRoot';\nimport {InstanceBackfills} from '../instance/InstanceBackfills';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nimport {OverviewActivityRoot} from './OverviewActivityRoot';\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\n\nexport const OverviewRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/overview/activity\">\n        <OverviewActivityRoot />\n      </Route>\n      <Route path=\"/overview/jobs\">\n        <OverviewJobsRoot />\n      </Route>\n      <Route path=\"/overview/schedules\">\n        <OverviewSchedulesRoot />\n      </Route>\n      <Route path=\"/overview/sensors\">\n        <OverviewSensorsRoot />\n      </Route>\n      <Route path=\"/overview/automaterialize\">\n        <AutomaterializationRoot />\n      </Route>\n      <Route path=\"/overview/backfills/:backfillId\">\n        <BackfillPage />\n      </Route>\n      <Route path=\"/overview/backfills\" exact>\n        <InstanceBackfills />\n      </Route>\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/overview/activity\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n"],"names":["OverviewTabs","props","refreshState","tab","automaterialize","useAutomaterializeDaemonStatus","automaterializeSensorsFlagState","useAutomationPolicySensorFlag","jsx_runtime","jsxs","Box","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","jsx","TabLink","id","title","to","gap","div","loading","Spinner","purpose","style","width","height","borderRadius","backgroundColor","paused","colorAccentBlue","colorAccentGray","padding","bottom","QueryRefreshCountdown","InstanceAutomaterializationEvaluationHistoryTable","param","queryResult","setSelectedTick","setTableView","setTimerange","setParentStatuses","useQueryPersistedState","queryKey","decode","React","statuses","Set","JSON","parse","InstigationTickStatus","STARTED","SUCCESS","FAILURE","SKIPPED","encode","raw","stringify","Array","from","setStatuses","useCursorPaginatedQuery","query","ASSET_DAEMON_TICKS_QUERY","variables","nextCursorForResult","data","ticks","autoMaterializeTicks","length","PAGE_SIZE","getResultArray","pageSize","paginationProps","useQueryRefreshAtInterval","hasPrevCursor","start","timestamp","end","endTimestamp","undefined","AutomaterializationEvaluationHistoryTable","AutomaterializationRoot","GlobalAutomaterializationRoot","Redirect","assertUnreachable","fetchData","fetch","useTrackPageView","confirm","useConfirmation","tmp","useUnscopedPermissions","permissions","canToggleAutoMaterialize","useLazyQuery","isPaused","setIsPaused","timeRange","afterTimestamp","beforeTimestamp","Date","now","TWENTY_MINUTES","useLayoutEffect","selectedTick","view","cursor","tableView","previousData","ids","map","tick","concat","status","push","index","nextTick","isStuckStartedTick","copy","_object_spread","_","_to_consumable_array","slice","onHoverTick","Page","PageHeader","Heading","tabs","vertical","horizontal","Alert","intent","description","Fragment","a","href","target","rel","Table","tbody","tr","td","Checkbox","format","checked","disabled","onChange","_async_to_generator","e","_state","sent","setPaused","border","Subtitle2","LiveTickTimeline","onSelectTick","exactRange","tickGrid","timeAfter","AutomaterializationTickDetailDialog","isOpen","close","AutomaterializeRunHistoryTable","color","colorTextLight","labelForBackfillStatus","key","BulkActionStatus","CANCELED","CANCELING","COMPLETED","FAILED","REQUESTED","backfillStatusValues","Object","keys","label","value","match","InstanceBackfills","useDocumentTitle","queryData","useQuery","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","statusFilter","useStaticSetFilter","name","icon","allValues","allowMultipleSelections","closeOnSelect","renderLabel","getStringValue","state","useFilters","filters","button","activeFiltersJsx","BACKFILLS_QUERY","statusState","size","result","partitionBackfillsOrError","__typename","results","FIFTEEN_SECONDS","content","PythonErrorInfo","error","NonIdealState","backfillHealths","daemonHealths","instance","daemonHealth","allDaemonStatuses","filter","daemon","daemonType","required","healthy","isBackfillHealthy","every","x","DaemonNotRunningAlertBody","BackfillTable","backfills","refetch","margin","top","CursorPaginationControls","gql","INSTANCE_HEALTH_FRAGMENT","PYTHON_ERROR_FRAGMENT","BACKFILL_TABLE_FRAGMENT","dayjs","duration","relativeTime","BackfillPage","client","useApolloClient","history","useHistory","backfillId","useParams","BACKFILL_DETAILS_QUERY","backfill","partitionBackfillOrError","isInProgress","includes","Link","right","BackfillActionsMenu","canCancelRuns","data-testid","testId","message","getRunsUrl","token","RunStatus","QUEUED","STARTING","NOT_STARTED","runsPathWithFilters","onShowAssetDetails","assetKey","isPartitioned","params","resp","BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY","asAssetKeyInput","partitionsTargetedForAssetKey","ranges","default_range","r","join","assetDetailsPathForKey","wrap","Detail","detail","Timestamp","ms","Number","timeFormat","showSeconds","showTimezone","Duration","TargetPartitionsDisplay","targetPartitionCount","numPartitions","targetPartitions","assetBackfillData","rootTargetedPartitions","BackfillStatusTagForPage","thead","th","assetBackfillStatuses","asset","targeted","inProgress","completed","failed","numPartitionsTargeted","numPartitionsInProgress","numPartitionsMaterialized","numPartitionsFailed","materialized","tokenForAssetKey","ButtonLink","onClick","path","StatusBar","Tag","minWidth","Label","colorBackgroundLight","display","gridTemplateColumns","gridTemplateRows","overflow","background","colorAccentGreen","colorAccentRed","styled","withConfig","s","rerender","intervalId","setInterval","clearInterval","span","formatDuration","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","minutes","Math","floor","hours","days","trim","OverviewAssetsRoot","Header","TabButton","ASSET_CATALOG_TABLE_QUERY","notifyOnNetworkStatusChange","groupedAssetsUnfiltered","assets","groups","assetsOrError","nodes","forEach","definition","groupName","repositoryName","repository","values","qs","searchQuery","searchValue","setSearchValue","groupedAssets","group","UNGROUPED_ASSETS","toLowerCase","parentRef","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","position","zIndex","grow","selected","TextInput","placeholder","Container","ref","VirtualHeaderRow","Inner","$totalHeight","VirtualRow","TEMPLATE_COLUMNS","fontSize","colorBackgroundDefault","HeaderCell","assetKeys","liveDataByNode","useAssetsLiveData","successful","inprogress","missing","assetLiveData","find","console","warn","buildAssetNodeStatusContent","liveData","expanded","case","StatusCase","LOADING","SOURCE_OBSERVING","SOURCE_OBSERVED","SOURCE_NEVER_OBSERVED","SOURCE_NO_STATE","MATERIALIZING","LATE_OR_FAILED","NEVER_MATERIALIZED","MATERIALIZED","PARTITIONS_FAILED","PARTITIONS_MISSING","PARTITIONS_MATERIALIZED","repo","repoAddress","buildRepoAddress","location","useViewport","containerProps","viewport","isBatchStillLoading","zeroOrBlank","Row","$height","$start","RowGrid","Cell","Icon","fontWeight","workspacePathFromAddress","RepositoryLinkWrapper","maxWidth","RepositoryLink","showRefresh","SelectOnHover","getCount","numMissing","adjective","colorBorderDefault","numFailed","borderLeft","borderRight","borderBottom","numMaterializing","numMaterialized","children","RowCell","colorTextDefault","SelectWrapper","Select","itemPredicate","item","displayNameForAssetKey","toLocaleLowerCase","itemRenderer","LinkWithNoUnderline","MenuItem","text","paddingLeft","whiteSpace","textOverflow","Caption","partitionCountString","onItemSelect","RepoFilterButton","WorkspaceContext","allRepos","visibleRepos","toggleVisible","open","setOpen","Dialog","canOutsideClickClose","canEscapeKeyClose","onClose","DialogHeader","RepoSelector","options","onBrowse","onToggle","DialogFooter","Button","outlined","rightIcon","useHourWindow","defaultValue","validate","useStateWithStorage","hourWindow","setHourWindow","setHourWindowWithDefault","SCHEDULE_FUTURE_TICKS_FRAGMENT","useRunsForTimeline","range","runsFilter","startSec","endSec","RUN_TIMELINE_QUERY","fetchPolicy","inProgressFilter","_object_spread_props","createdBefore","terminatedFilter","doneStatuses","updatedAfter","tickCursor","ticksUntil","initialLoading","unterminated","terminated","workspaceOrError","runsByJobKey","run","startTime","repositoryOrigin","overlap","endTime","runJobKey","makeJobKey","repositoryLocationName","pipelineName","jobsWithRuns","jobs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","locationEntries","Symbol","iterator","next","done","_loop","locationEntry","locationOrLoadError","_step1","repositories","pipelines","pipeline","schedules","schedule","jobTicks","scheduleState","InstigationStatus","RUNNING","futureTicks","err","return","isAdHoc","isHiddenAssetGroupJob","jobKey","jobName","jobRuns","jobsAndTicksToAdd","adHocJobs","job","jobType","runs","workspacePipelinePath","repoName","repoLocation","isJob","earliest","reduce","accum","startTimes","_define_property","min","sort","b","repoAddressAsHumanString","RUN_TIME_FRAGMENT","hourWindowToOffset","OverviewTimelineRoot","trace","useStartTrace","setNow","offsetMsec","setOffsetMsec","defaults","search","timer","onPageEarlier","onPageLater","onPageNow","LOOKAHEAD_HOURS","endTrace","visibleJobKeys","searchLower","flat","flatMap","repositoryLocation","visibleJobs","has","ButtonGroup","activeItems","buttons","hrWindow","ErrorBoundary","region","RunTimeline","OverviewActivityRoot","header","json","defaultTab","setDefaultTab","tabButton","JoinedButtons","ActivatableButton","$active","Switch","Route","render","useDelayedState","delayMsec","setValue","setTimeout","clearTimeout","SearchInputSpinner","tooltipContent","Tooltip","placement","canShow","OverviewJobsTable","repos","allKeys","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","type","jobCount","repoKey","duplicateRepoNames","findDuplicateRepoNames","ii","row","VirtualizedJobHeader","RepoRow","showLocation","rightElement","VirtualizedJobRow","sortRepoBuckets","buckets","aString","bString","localeCompare","visibleRepoKeys","option","OverviewJobsRoot","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","repoBuckets","visibleKeys","buildBuckets","sanitizedSearch","anySearch","filteredBySearch","searchToLower","showSearchSpinner","workspaceLoading","paddingTop","anyReposHidden","strong","entries","entry","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_iterator1","OverviewResourcesTable","resources","resourceCount","resource","VirtualizedResourceHeader","VirtualizedResourceRow","OverviewResourcesRoot","OVERVIEW_RESOURCES_QUERY","allTopLevelResourceDetails","RESOURCE_ENTRY_FRAGMENT","UnloadableSensors","sensorStates","showSubheading","_param_showSubheading","Subheading","UnloadableSensorInfo","sensorState","SensorStateRow","UnloadableSchedules","scheduleStates","UnloadableScheduleInfo","ScheduleStateRow","element","selectorId","hasStopPermission","useMutation","STOP_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","stopSensor","onChangeSwitch","jobOriginId","jobSelectorId","lacksPermission","latestTick","toggleOffInFlight","STOPPED","DEFAULT_DISABLED_REASON","Group","spacing","InstigatorSelectorInformation","instigatorState","TickStatusTag","InstigatedRunStatus","instigationState","STOP_SCHEDULE_MUTATION","displayScheduleMutationErrors","stopSchedule","typeSpecificData","cronSchedule","scheduleOriginId","scheduleSelectorId","humanCronString","useCodeLocationFilter","setVisible","setHidden","allRepoAddresses","visibleRepoAddresses","initialState","getKey","TruncatedTextWithFullTextOnHover","onStateChanged","menuWidth","OverviewScheduleTable","headerCheckbox","checkedKeys","onToggleCheckFactory","scheduleCount","VirtualizedScheduleHeader","checkbox","scheduleKey","makeScheduleKey","VirtualizedScheduleRow","showCheckboxColumn","onToggleChecked","OverviewSchedulesRoot","codeLocationFilter","runningStateFilter","useInstigationStatusFilter","OVERVIEW_SCHEDULES_QUERY","filteredBuckets","_param","rest","runningState","anySchedulesVisible","some","allPermissionedSchedules","filterPermissionedInstigationState","scheduleName","allPermissionedScheduleKeys","useSelectionReducer","checkedIds","onToggleFactory","permissionedKeysOnScreen","filteredKeys","checkedSchedules","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","filterButton","useDisabledButtonTooltipFix","ScheduleBulkActionMenu","onDone","unloadableInstigationStatesOrError","UnloadableSchedulesAlert","SchedulerInfo","CheckAllBox","totalCount","setIsOpen","UnloadableScheduleDialog","UNLOADABLE_SCHEDULES_QUERY","scheduleNames","BASIC_INSTIGATION_STATE_FRAGMENT","INSTIGATION_STATE_FRAGMENT","OverviewSensorTable","sensors","sensorCount","sensor","VirtualizedSensorHeader","sensorKey","makeSensorKey","VirtualizedSensorRow","OverviewSensorsRoot","OVERVIEW_SENSORS_QUERY","anySensorsVisible","allPermissionedSensors","sensorName","allPermissionedSensorKeys","checkedSensors","SensorBulkActionMenu","UnloadableSensorsAlert","SensorInfo","UnloadableSensorDialog","UNLOADABLE_SENSORS_QUERY","OverviewRoot","exact","overview_OverviewRoot"],"sourceRoot":""}